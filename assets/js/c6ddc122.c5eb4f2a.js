"use strict";(self.webpackChunkintellisense_form_docs=self.webpackChunkintellisense_form_docs||[]).push([[3],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return p}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=d(t),p=a,f=c["".concat(l,".").concat(p)]||c[p]||m[p]||o;return t?r.createElement(f,i(i({ref:n},u),{},{components:t})):r.createElement(f,i({ref:n},u))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var d=2;d<o;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},69442:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return u},default:function(){return c}});var r=t(87462),a=t(63366),o=(t(67294),t(3905)),i=["components"],s={id:"guide-rely-forms",title:"表单之间的交互"},l=void 0,d={unversionedId:"guide-rely-forms",id:"guide-rely-forms",title:"表单之间的交互",description:"表单之间的交互主要使用场景包含以下几个方面：",source:"@site/docs/guide-rely-forms.md",sourceDirName:".",slug:"/guide-rely-forms",permalink:"/intellisense-form-website/docs/guide-rely-forms",tags:[],version:"current",frontMatter:{id:"guide-rely-forms",title:"表单之间的交互"},sidebar:"someSidebar",previous:{title:"控制按钮的点击行为",permalink:"/intellisense-form-website/docs/guide-control-button-click"},next:{title:"控制表单页上的按钮和表单项",permalink:"/intellisense-form-website/docs/guide-control-button-formitem"}},u=[{value:"获取指定表单数据作为默认值",id:"获取指定表单数据作为默认值",children:[],level:2},{value:"根据指定的表单数据对当前表单进行校验",id:"根据指定的表单数据对当前表单进行校验",children:[],level:2},{value:"办结时向指定表单保存数据",id:"办结时向指定表单保存数据",children:[],level:2}],m={toc:u};function c(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"表单之间的交互主要使用场景包含以下几个方面："),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"获取指定表单的数据作为当前表单的默认值"),(0,o.kt)("li",{parentName:"ol"},"根据指定表单的数据对当前表单进行校验"),(0,o.kt)("li",{parentName:"ol"},"当前表单在办结节点，办结之前先往另一个表单保存一条数据")),(0,o.kt)("h2",{id:"获取指定表单数据作为默认值"},"获取指定表单数据作为默认值"),(0,o.kt)("p",null,"需求场景："),(0,o.kt)("p",null,"有住房登记单和住房补贴申请两个业务，在申请住房补贴时需要将当前登录人最新一条已办结的住房登记单中的部分信息带入住房补贴申请单。"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="getLatestEndFormData.ts"',title:'"getLatestEndFormData.ts"'},'import field from "@sinoform/helper-condition-api";\n/**\n * 获取当前登录人起草的最新办结的一条数据\n *\n * @param formId 表单id\n * @param currentUser 当前登录人\n * @returns 返回当前登录人起草的最新办结的一条数据\n */\nexport default async function getLatestEndFormData(\n  formId: string,\n  currentUser: UserInfo\n) {\n  // 创建人等于当前登录人且状态为已办结\n  const queryCriteriaItems = field.and(\n    field("userId").equal(currentUser.userId),\n    field("status").equal("已办结")\n  );\n  //倒序排序\n  const sort = "endTime,desc";\n  const result = await http.get<any>("/apis/intellisense-form/formData/list", {\n    params: {\n      queryCriteriaItems: JSON.stringify(queryCriteriaItems),\n      sort,\n      size: 1,\n      page: 0,\n      formDesignId: formId,\n      userId: currentUser.userId,\n      deptId: currentUser.deptId,\n    },\n  });\n\n  return result?.content?.[0];\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import appSetting from "@sinoform/app-setting";\nimport getLatestEndFormData from "./getLatestEndFormData";\n\n// 住房登记表单id\nconst ZFDJ_FORMID = "61c99ea3c9327f1d0cb7ef26";\n//住房补贴表单id\nconst ZFBT_FORMID = "78afwefafe1c99ea3c9327f1d";\n\n// 从远程获取值\nappSetting.defaultFormValueAsync(ZFBT_FORMID, async (currentUser) => {\n  // 获取当前登录人创建且最新办结的住房登记单的数据\n  const data = await getLatestEndFormData(ZFDJ_FORMID, currentUser);\n\n  //将相关数据写入对应位置\n  return {\n    houseId: data.houseId,\n    houseName: data.houseName,\n    houseYears: data.houseYears,\n    houseAddress: data.houseAddress,\n  };\n});\n')),(0,o.kt)("h2",{id:"根据指定的表单数据对当前表单进行校验"},"根据指定的表单数据对当前表单进行校验"),(0,o.kt)("p",null,"需求场景：在申请安装数据库时，校验安装数据库的数量不能大于数据库的采购数量。"),(0,o.kt)("p",null,"首先定义一个方法获取最新一条办结的当前年份本部门的数据库采购申请单的数据。"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="getLatestEndFormData.ts"',title:'"getLatestEndFormData.ts"'},'import field from "@sinoform/helper-condition-api";\n\nexport default async function getLatestEndFormData(\n  formId: string,\n  currentUser: UserInfo\n) {\n  // 创建部门等于当前登录人部门，创建年度为当前年并且数据已办结\n  const queryCriteriaItems = field.and(\n    field("deptId").equal(currentUser.deptId),\n    field("status").equal("已办结"),\n    field("formNd").equal(new Date().getYear())\n  );\n  //倒序排序\n  const sort = "endTime,desc";\n  const result = await http.get<any>("/apis/intellisense-form/formData/list", {\n    params: {\n      queryCriteriaItems: JSON.stringify(queryCriteriaItems),\n      sort,\n      size: 1,\n      page: 0,\n      formDesignId: formId,\n      userId: currentUser.userId,\n      deptId: currentUser.deptId,\n    },\n  });\n\n  return result?.content?.[0];\n}\n')),(0,o.kt)("p",null,"然后调用上述方法获取数据，与当前表单中的数据库安装数量对比进行表单校验。"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="index.ts"',title:'"index.ts"'},'import appSetting from "@sinoform/app-setting";\nimport getLatestEndFormData from "./getLatestEndFormData";\n\n// 数据库采购申请单id\nconst formA = "form_id_1";\n\n// 数据库安装申请单\nconst formB = "form_id_2";\n\nAppSetting.formValidateAsync(formB, {\n  // 通过异步方法校验安装数量（installDbCount）是否符合标准\n  installDbCount: async (value, values, currentUser) => {\n    const data = await getLatestEndFormData(formA, currentUser);\n    if (value > data.dbCount) {\n      return "安装数量不能大于采购数量";\n    }\n\n    return undefined;\n  },\n});\n')),(0,o.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"注意")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"以上两个示例中表单数据均是获取流程表单列表数据，如果我们需要获取无流程表单列表数据，可以使用下面的方式："),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * 获取指定用户最新创建的无流程表单数据\n *\n * @param formId 表单id\n * @param userId 用户id\n * @param deptId 用户所属部门id\n * @param roleIds 用户角色id\n * @returns 返回指定用户最新创建的表单数据\n */\nexport default async function getLatestCreateNoFlowData(\n  formId: string,\n  userId: string,\n  deptId: string,\n  roleIds: string[]\n) {\n  // 查询条件可以自定义\n  const queryCriteriaItems = [\n    {\n      id: "userId",\n      operator: "equal",\n      value: userId,\n    },\n  ];\n  const sort = "createTime,desc";\n  const result = await http.get<any>(\n    "/apis/intellisense-form/formNotWorkflowData/list",\n    {\n      params: {\n        queryCriteriaItems: JSON.stringify(queryCriteriaItems),\n        sort,\n        size: 1,\n        page: 0,\n        formDesignId: formId,\n        userId,\n        deptId,\n        roleIds,\n      },\n    }\n  );\n\n  return result?.content?.[0];\n}\n')))),(0,o.kt)("h2",{id:"办结时向指定表单保存数据"},"办结时向指定表单保存数据"),(0,o.kt)("p",null,"需求场景：图书管理系统，",(0,o.kt)("inlineCode",{parentName:"p"},"借阅申请"),"流程办结时，需要往",(0,o.kt)("inlineCode",{parentName:"p"},"借阅记录"),"表中保存一条数据。"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="index.ts"',title:'"index.ts"'},'import appSetting from "@sinoform/app-setting";\nimport { saveNoFlowFormData } from "@sinoform/app-core"; // 表单内部封装的建议的保存无流程表单数据的方法\n\n//借阅申请表单设计id\nconst JYSQ_FORMID = "form-id-1";\n//借阅记录表单设计id\nconst JYJL_FORMID = "form-id-2";\n\nappSetting.hooks.detailPage.tap("监听表单", (detailPageContext) => {\n  const {\n    formState,\n    formData: {\n      formDesign: { id },\n    },\n    hooks,\n    currentUser,\n  } = detailPageContext;\n  // 如果表单id是借阅申请表单设计id,则添加按钮前置事件监听\n  if (id === JYSQ_FORMID) {\n    hooks.beforeButtonClick.tapPromise("按钮监听", async (buttonId) => {\n      // 获取当前表单数据\n      const { values } = formState;\n      // 如果点击办结按钮，则需要往借阅记录表中保存一条数据\n      if (buttonId == "end") {\n        // 梳理要保存的表单数据\n        const formValues = {\n          bookId: values.bookId,\n          bookName: values.bookName,\n          jyr: values.jyr,\n          jyrq: values.jyrq,\n        };\n        await saveNoFlowFormData(JYJL_FORMID, currentUser, formValues);\n      }\n    });\n  }\n});\n')))}c.isMDXComponent=!0}}]);