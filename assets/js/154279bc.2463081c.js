"use strict";(self.webpackChunkintellisense_form_docs=self.webpackChunkintellisense_form_docs||[]).push([[6719],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var l=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,l,r=function(e,n){if(null==e)return{};var t,l,r={},i=Object.keys(e);for(l=0;l<i.length;l++)t=i[l],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)t=i[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var a=l.createContext({}),p=function(e){var n=l.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=p(e.components);return l.createElement(a.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},d=l.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,k=d["".concat(a,".").concat(m)]||d[m]||c[m]||i;return t?l.createElement(k,o(o({ref:n},s),{},{components:t})):l.createElement(k,o({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var u={};for(var a in n)hasOwnProperty.call(n,a)&&(u[a]=n[a]);u.originalType=e,u.mdxType="string"==typeof e?e:r,o[1]=u;for(var p=2;p<i;p++)o[p]=t[p];return l.createElement.apply(null,o)}return l.createElement.apply(null,t)}d.displayName="MDXCreateElement"},59176:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return u},contentTitle:function(){return a},metadata:function(){return p},toc:function(){return s},default:function(){return d}});var l=t(87462),r=t(63366),i=(t(67294),t(3905)),o=["components"],u={id:"plugin-document-structure",title:"插件项目结构"},a=void 0,p={unversionedId:"plugin-document-structure",id:"plugin-document-structure",title:"插件项目结构",description:"为了使项目中代码得层级结构更加分明，我们需要对插件项目的结构做一些约定。",source:"@site/docs/plugin-document-structure.mdx",sourceDirName:".",slug:"/plugin-document-structure",permalink:"/intellisense-form-website/docs/plugin-document-structure",tags:[],version:"current",frontMatter:{id:"plugin-document-structure",title:"插件项目结构"},sidebar:"someSidebar",previous:{title:"插件项目联调",permalink:"/intellisense-form-website/docs/plugin-test"},next:{title:"命名约定",permalink:"/intellisense-form-website/docs/plugin-naming-conventions"}},s=[{value:"插件项目名称",id:"插件项目名称",children:[],level:2},{value:"源码目录和入口文件",id:"源码目录和入口文件",children:[],level:2},{value:"插件代码",id:"插件代码",children:[{value:"流程按钮插件文件夹",id:"流程按钮插件文件夹",children:[],level:3},{value:"表单字段插件文件夹",id:"表单字段插件文件夹",children:[],level:3}],level:2},{value:"组件文件夹",id:"组件文件夹",children:[],level:2},{value:"详情页扩展代码",id:"详情页扩展代码",children:[{value:"全局详情页扩展",id:"全局详情页扩展",children:[],level:3},{value:"表单或者应用扩展",id:"表单或者应用扩展",children:[],level:3}],level:2},{value:"业务模块比较多时的项目结构",id:"业务模块比较多时的项目结构",children:[],level:2}],c={toc:s};function d(e){var n=e.components,t=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,l.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"为了使项目中代码得层级结构更加分明，我们需要对插件项目的结构做一些约定。"),(0,i.kt)("p",null,"看一个较为完整的插件项目结构（以 qxjoa-plugins 为例介绍）："),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"📦qxjoa-plugins\n ┣ 📂src\n ┃ ┣ 📂plugins\n ┃ ┃ ┣ 📂detail-page-extends\n ┃ ┃ ┃ ┣ 📜controlButtonClickExtends.ts\n ┃ ┃ ┃ ┣ 📜customPermissionExtends.ts\n ┃ ┃ ┃ ┣ 📜helloExtends.ts\n ┃ ┃ ┃ ┣ 📜helloPermissionExtends.ts\n ┃ ┃ ┃ ┗ 📜watchFormValuesExtends.ts\n ┃ ┃ ┣ 📂flow-button-custom-save\n ┃ ┃ ┃ ┣ 📜CustomSaveButton.css\n ┃ ┃ ┃ ┣ 📜CustomSaveButton.ts\n ┃ ┃ ┃ ┗ 📜index.ts\n ┃ ┃ ┣ 📂flow-button-hello\n ┃ ┃ ┃ ┣ 📜HelloButton.css\n ┃ ┃ ┃ ┣ 📜HelloButton.ts\n ┃ ┃ ┃ ┗ 📜index.ts\n ┃ ┃ ┗ 📂form-field-custom-text-input\n ┃ ┃ ┃ ┣ 📂config-panel\n ┃ ┃ ┃ ┃ ┣ 📜CustomTextInputConfigPanel.tsx\n ┃ ┃ ┃ ┃ ┗ 📜index.ts\n ┃ ┃ ┃ ┣ 📂preview\n ┃ ┃ ┃ ┃ ┣ 📜CustomTextInputPreview.ts\n ┃ ┃ ┃ ┃ ┗ 📜index.ts\n ┃ ┃ ┃ ┗ 📂render\n ┃ ┃ ┃ ┃ ┣ 📜CustomTextInputRenderer.css\n ┃ ┃ ┃ ┃ ┣ 📜CustomTextInputRenderer.ts\n ┃ ┃ ┃ ┃ ┗ 📜index.ts\n ┃ ┗ 📜index.ts\n ┣ 📜.babelrc\n ┣ 📜.editorconfig\n ┣ 📜.gitignore\n ┣ 📜.npmignore\n ┣ 📜LICENSE\n ┣ 📜package.json\n ┣ 📜README.md\n ┣ 📜tsconfig.json\n ┣ 📜webpack.base.config.js\n ┣ 📜webpack.dev.config.js\n ┣ 📜webpack.prod.config.js\n ┗ 📜yarn.lock\n")),(0,i.kt)("p",null,"接下来一一介绍插件项目结构中的重要组成部分。"),(0,i.kt)("h2",{id:"插件项目名称"},"插件项目名称"),(0,i.kt)("p",null,"插件项目名称有一定的约束，命名规则如下："),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"只能包含小写字母、数字和连字符（",(0,i.kt)("inlineCode",{parentName:"li"},"-"),"）"),(0,i.kt)("li",{parentName:"ul"},"开头只能是小写字母"),(0,i.kt)("li",{parentName:"ul"},"必须以 ",(0,i.kt)("inlineCode",{parentName:"li"},"-plugins")," 结尾")),(0,i.kt)("p",null,"可以接受的插件项目名称："),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"qxjoa-plugins")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tjoa-plugins"))),(0,i.kt)("h2",{id:"源码目录和入口文件"},"源码目录和入口文件"),(0,i.kt)("p",null,"项目所有源码均放入 ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," 目录中。项目源码的入口文件是 ",(0,i.kt)("inlineCode",{parentName:"p"},"src/index.ts"),"。智能表单访问插件项目时，首先访问到的就是入口文件。"),(0,i.kt)("h2",{id:"插件代码"},"插件代码"),(0,i.kt)("p",null,"所有的插件代码均放入 ",(0,i.kt)("inlineCode",{parentName:"p"},"src/plugins")," 目录中。每个插件都需要有自己独立的子文件夹，我们称之为插件文件夹。插件文件夹的命名需要根据插件类型和插件用途来命名。"),(0,i.kt)("h3",{id:"流程按钮插件文件夹"},"流程按钮插件文件夹"),(0,i.kt)("p",null,"流程按钮插件文件夹名称需要以 ",(0,i.kt)("inlineCode",{parentName:"p"},"flow-button-")," 开头。"),(0,i.kt)("p",null,"可以接受的流程按钮插件文件夹名称："),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"flow-button-hello")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"flow-button-custom-save"))),(0,i.kt)("p",null,"流程按钮一般只需要定义一个组件即可，所有流程按钮文件夹是一个",(0,i.kt)("a",{parentName:"p",href:"#%E7%BB%84%E4%BB%B6%E6%96%87%E4%BB%B6%E5%A4%B9"},"组件文件夹"),"。"),(0,i.kt)("h3",{id:"表单字段插件文件夹"},"表单字段插件文件夹"),(0,i.kt)("p",null,"表单字段插件文件夹名称需要以 ",(0,i.kt)("inlineCode",{parentName:"p"},"form-field-")," 开头。"),(0,i.kt)("p",null,"可以接受的表单字段插件文件夹名称："),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"form-field-custom-text-input")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"form-field-custom-select"))),(0,i.kt)("p",null,"表单字段中每一个组件是一个独立的文件夹，称之为",(0,i.kt)("a",{parentName:"p",href:"#%E7%BB%84%E4%BB%B6%E6%96%87%E4%BB%B6%E5%A4%B9"},"组件文件夹"),"。在表单字段中，以组件用途来命名组件文件夹。如下所示："),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"render")," - 表单控件在表单中展现的组件"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"preview")," - 表单控件在表单设计器中展现的组件"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"config-panel")," - 表单控件在表单设计器的属性面板中展现的组件")),(0,i.kt)("h2",{id:"组件文件夹"},"组件文件夹"),(0,i.kt)("p",null,"一个组件一个文件夹。组件往往会包括："),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"组件文件，如使用 Web Component、Vue 或者 React 开发的组件"),(0,i.kt)("li",{parentName:"ul"},"组件的样式文件"),(0,i.kt)("li",{parentName:"ul"},"将组件包装为 React 组件（如有必要）"),(0,i.kt)("li",{parentName:"ul"},"将组件默认导出")),(0,i.kt)("p",null,"这些文件的命名规则如下："),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"组件文件名称需遵循大写驼峰式"),(0,i.kt)("li",{parentName:"ul"},"组件的样式文件需要保持与组件文件名称一致"),(0,i.kt)("li",{parentName:"ul"},"在 ",(0,i.kt)("inlineCode",{parentName:"li"},"index.ts")," 文件中将组件包装为 React 组件，并默认导出")),(0,i.kt)("p",null,"正确的示例："),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"📂flow-button-hello\n ┣ 📜HelloButton.css\n ┣ 📜HelloButton.ts\n ┗ 📜index.ts\n")),(0,i.kt)("h2",{id:"详情页扩展代码"},"详情页扩展代码"),(0,i.kt)("p",null,"详情页扩展代码放在 ",(0,i.kt)("inlineCode",{parentName:"p"},"src/plugins/detail-page-extends")," 目录下。所有扩展文件名称以 ",(0,i.kt)("inlineCode",{parentName:"p"},"Extends")," 结尾。"),(0,i.kt)("h3",{id:"全局详情页扩展"},"全局详情页扩展"),(0,i.kt)("p",null,"如果扩展代码针对的是所有表单的，那么此扩展称之为全局详情页扩展。全局详情页扩展以",(0,i.kt)("inlineCode",{parentName:"p"},"GobalExtends")," 结尾。"),(0,i.kt)("h3",{id:"表单或者应用扩展"},"表单或者应用扩展"),(0,i.kt)("p",null,"一个表单的扩展代码或者一个应用所有表单的扩展代码放在一个扩展文件中。这些扩展文件名称需要包含表单或者应用名称。"),(0,i.kt)("p",null,"可以接受的扩展文件名称示例："),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GwFormExtends.ts")," - 公文表单扩展"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MeetingAppEtends.ts")," - 会议应用扩展")),(0,i.kt)("h2",{id:"业务模块比较多时的项目结构"},"业务模块比较多时的项目结构"),(0,i.kt)("p",null,"上面的文档结构比较适合小型的业务系统。当项目组的业务模块非常多，而我们要给多个模块添加独立的组件和业务逻辑时，使用上述的项目结构可能就会发现我们为了区分各个模块的文件就不得不添加更长的前缀，导致文档看上去就比较混乱了。这个时候我们可以再对文档结构进行适当的调整，为各个业务模块建立自己独立的文件夹，将属于该模块的文件统一放置到这个文件夹下。"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"📦qxjoa-plugins\n ┣ 📂src\n ┃ ┣ 📂commons\n ┃ ┣ 📂features\n ┃ ┃ ┣ 📂模块1\n ┃ ┃ ┣ 📂export-button\n ┃ ┃ ┣ 📜index.ts\n ┃ ┃ ┣ 📂模块2\n ┃ ┃ ┣ 📂import-button\n ┃ ┃ ┃ ┣ 📜index.ts\n ┃ ┣ 📂plugins\n ┃ ┃ ┣ 📂flow-button-custom-save\n ┃ ┃ ┃ ┣ 📜CustomSaveButton.css\n ┃ ┃ ┃ ┣ 📜CustomSaveButton.ts\n ┃ ┃ ┃ ┗ 📜index.ts\n ┃ ┃ ┣ 📂flow-button-hello\n ┃ ┃ ┃ ┣ 📜HelloButton.css\n ┃ ┃ ┃ ┣ 📜HelloButton.ts\n ┃ ┃ ┃ ┗ 📜index.ts\n ┃ ┃ ┗ 📂form-field-custom-text-input\n ┃ ┃ ┃ ┣ 📂config-panel\n ┃ ┃ ┃ ┃ ┣ 📜CustomTextInputConfigPanel.tsx\n ┃ ┃ ┃ ┃ ┗ 📜index.ts\n ┃ ┃ ┃ ┣ 📂preview\n ┃ ┃ ┃ ┃ ┣ 📜CustomTextInputPreview.ts\n ┃ ┃ ┃ ┃ ┗ 📜index.ts\n ┃ ┃ ┃ ┗ 📂render\n ┃ ┃ ┃ ┃ ┣ 📜CustomTextInputRenderer.css\n ┃ ┃ ┃ ┃ ┣ 📜CustomTextInputRenderer.ts\n ┃ ┃ ┃ ┃ ┗ 📜index.ts\n ┃ ┗ 📜index.ts\n ┣ 📜.babelrc\n ┣ 📜.editorconfig\n ┣ 📜.gitignore\n ┣ 📜.npmignore\n ┣ 📜LICENSE\n ┣ 📜package.json\n ┣ 📜README.md\n ┣ 📜tsconfig.json\n ┣ 📜webpack.base.config.js\n ┣ 📜webpack.dev.config.js\n ┣ 📜webpack.prod.config.js\n ┗ 📜yarn.lock\n")),(0,i.kt)("p",null,"在新的项目结构中，我们抽离了出来了一个公用的模块",(0,i.kt)("inlineCode",{parentName:"p"},"commons"),"和业务模块",(0,i.kt)("inlineCode",{parentName:"p"},"features"),"。"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"commons。用于存放各业务模块中公用的组件和业务逻辑代码"),(0,i.kt)("li",{parentName:"ul"},"features。用于存放各个业务模块自己的功能实现代码")),(0,i.kt)("p",null,"这样我们可以更方便更快速的根据各自业务模块找到对应的实现代码。"))}d.isMDXComponent=!0}}]);