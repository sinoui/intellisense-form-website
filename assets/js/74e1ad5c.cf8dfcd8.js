"use strict";(self.webpackChunkintellisense_form_docs=self.webpackChunkintellisense_form_docs||[]).push([[3088],{3905:function(n,e,o){o.d(e,{Zo:function(){return p},kt:function(){return u}});var a=o(67294);function t(n,e,o){return e in n?Object.defineProperty(n,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[e]=o,n}function r(n,e){var o=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),o.push.apply(o,a)}return o}function i(n){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?r(Object(o),!0).forEach((function(e){t(n,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(o,e))}))}return n}function s(n,e){if(null==n)return{};var o,a,t=function(n,e){if(null==n)return{};var o,a,t={},r=Object.keys(n);for(a=0;a<r.length;a++)o=r[a],e.indexOf(o)>=0||(t[o]=n[o]);return t}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)o=r[a],e.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(n,o)&&(t[o]=n[o])}return t}var l=a.createContext({}),m=function(n){var e=a.useContext(l),o=e;return n&&(o="function"==typeof n?n(e):i(i({},e),n)),o},p=function(n){var e=m(n.components);return a.createElement(l.Provider,{value:e},n.children)},c={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(n,e){var o=n.components,t=n.mdxType,r=n.originalType,l=n.parentName,p=s(n,["components","mdxType","originalType","parentName"]),d=m(o),u=t,g=d["".concat(l,".").concat(u)]||d[u]||c[u]||r;return o?a.createElement(g,i(i({ref:e},p),{},{components:o})):a.createElement(g,i({ref:e},p))}));function u(n,e){var o=arguments,t=e&&e.mdxType;if("string"==typeof n||t){var r=o.length,i=new Array(r);i[0]=d;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s.mdxType="string"==typeof n?n:t,i[1]=s;for(var m=2;m<r;m++)i[m]=o[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,o)}d.displayName="MDXCreateElement"},97467:function(n,e,o){o.r(e),o.d(e,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return m},toc:function(){return p},default:function(){return d}});var a=o(87462),t=o(63366),r=(o(67294),o(3905)),i=["components"],s={id:"mongo-k8s",title:"部署 mongodb"},l=void 0,m={unversionedId:"dep-k8s/mongo-k8s",id:"dep-k8s/mongo-k8s",title:"部署 mongodb",description:"本章节介绍的是在 kubernetes 部署单节点 mongodb 的方案。如果需要部署 mongodb 集群，请移步《部署 mongodb 集群（手动）》",source:"@site/docs/dep-k8s/1-mongo-k8s.md",sourceDirName:"dep-k8s",slug:"/dep-k8s/mongo-k8s",permalink:"/intellisense-form-website/docs/dep-k8s/mongo-k8s",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"mongo-k8s",title:"部署 mongodb"},sidebar:"someSidebar",previous:{title:"安装 chrome",permalink:"/intellisense-form-website/docs/deployment-chrome"},next:{title:"部署智能表单",permalink:"/intellisense-form-website/docs/dep-k8s/form-k8s"}},p=[{value:"一、准备离线镜像",id:"一准备离线镜像",children:[],level:2},{value:"二、部署 MongoDB",id:"二部署-mongodb",children:[],level:2},{value:"三、分配存储空间",id:"三分配存储空间",children:[{value:"3.1. 手动维护本地存储卷",id:"31-手动维护本地存储卷",children:[],level:3},{value:"3.2. 自动创建本地存储卷",id:"32-自动创建本地存储卷",children:[],level:3}],level:2},{value:"四、访问 mongo",id:"四访问-mongo",children:[],level:2}],c={toc:p};function d(n){var e=n.components,o=(0,t.Z)(n,i);return(0,r.kt)("wrapper",(0,a.Z)({},c,o,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"警告")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"本章节介绍的是在 kubernetes 部署单节点 mongodb 的方案。如果需要部署 mongodb 集群，请移步",(0,r.kt)("a",{parentName:"p",href:"/intellisense-form-website/docs/dep-k8s/mongo-cluster-k8s"},"《部署 mongodb 集群（手动）》")))),(0,r.kt)("h2",{id:"一准备离线镜像"},"一、准备离线镜像"),(0,r.kt)("p",null,"需要准备以下离线镜像："),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"docker.io/library/mongo:4.2.6")),(0,r.kt)("h2",{id:"二部署-mongodb"},"二、部署 MongoDB"),(0,r.kt)("p",null,"将以下配置保存为 ",(0,r.kt)("inlineCode",{parentName:"p"},"mongo.yaml")," 文件："),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: sinoform-mongo\nspec:\n  selector:\n    matchLabels:\n      app: sinoform-mongo\n  template:\n    metadata:\n      labels:\n        app: sinoform-mongo\n    spec:\n      containers:\n        - name: sinoform-mongo\n          image: docker.io/library/mongo:4.2.6\n          resources:\n            limits:\n              memory: "512Mi"\n              cpu: "1000m"\n          ports:\n            - containerPort: 27107\n          volumeMounts:\n            - name: sinoform-mongo-data\n              mountPath: /data/db\n            - name: sinoform-mongo-config\n              mountPath: /etc/mongod.conf\n              subPath: mongod.conf\n      volumes:\n        - name: sinoform-mongo-data\n          persistentVolumeClaim:\n            claimName: sinoform-mongo-pvc\n        - name: sinoform-mongo-config\n          configMap:\n            name: sinoform-mongo-config\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: sinoform-mongo-pvc\nspec:\n  resources:\n    requests:\n      storage: 10Gi\n  volumeMode: Filesystem\n  accessModes:\n    - ReadWriteOnce\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: sinoform-mongo-srv\nspec:\n  selector:\n    app: sinoform-mongo\n  ports:\n    - port: 27017\n      targetPort: 27017\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: sinoform-mongo-config\ndata:\n  mongod.conf: |-\n    #日志配置\n    systemLog:\n      destination: file\n      path: /var/log/mongodb/mongod.log\n      logAppend: true\n\n    #后台运行\n    processManagement:\n      fork: true\n\n    #监听所有ip(0.0.0.0),端口27017\n    net:\n      bindIpAll: true\n      port: 27017\n\n    #配置不需要密码即可访问数据库\n    security:\n      authorization: disabled\n\n    #数据存储位置，journal 日志用来数据恢复\n    storage:\n      journal:\n        enabled: true\n')),(0,r.kt)("p",null,"启动 mongo："),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f mongo.yaml\n")),(0,r.kt)("h2",{id:"三分配存储空间"},"三、分配存储空间"),(0,r.kt)("p",null,"需要为 mongodb 分配存储空间，即为 ",(0,r.kt)("inlineCode",{parentName:"p"},"sinoform-mongo-pvc")," 分配存储空间。如果已经有自动分配存储空间的 storageclass，则可以跳过。如果没有，则可以手动为 ",(0,r.kt)("inlineCode",{parentName:"p"},"sinoform-mongo-pvc")," 创建 ",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/zh-cn/docs/concepts/storage/persistent-volumes/"},"pv"),"。本章节给出两种方案，大家根据自身的情况参考其中一个即可。"),(0,r.kt)("h3",{id:"31-手动维护本地存储卷"},"3.1. 手动维护本地存储卷"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'{24,32} title="mongo-local-storage.yaml"',"{24,32}":!0,title:'"mongo-local-storage.yaml"'},"----\n# 创建 本地存储卷\nkind: StorageClass\napiVersion: storage.k8s.io/v1\nmetadata:\n  name: mongo-local-storage\nprovisioner: kubernetes.io/no-provisioner\nvolumeBindingMode: WaitForFirstConsumer\n---\n# 在 192.168.90.100:/var/lib/mongo 上创建 pv，并绑定到 mongo-local-storage 中\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: sinoform-mongo-pv-100\nspec:\n  capacity:\n    storage: 100Gi\n  volumeMode: Filesystem\n  accessModes:\n    - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Delete\n  storageClassName: mongo-local-storage\n  local:\n    path: /var/lib/mongo\n  nodeAffinity:\n    required:\n      nodeSelectorTerms:\n        - matchExpressions:\n            - key: kubernetes.io/hostname\n              operator: In\n              values:\n                - 192.168.90.100\n")),(0,r.kt)("p",null,"然后调整 ",(0,r.kt)("inlineCode",{parentName:"p"},"sinoform-mongo-pvc"),"，绑定 ",(0,r.kt)("inlineCode",{parentName:"p"},"mongo-local-storage")," 存储卷："),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'{6} title="sinoform-mongo-pvc.yaml"',"{6}":!0,title:'"sinoform-mongo-pvc.yaml"'},"apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: sinoform-mongo-pvc\nspec:\n  storageClassName: mongo-local-storage\n  resources:\n    requests:\n      storage: 10Gi\n  volumeMode: Filesystem\n  accessModes:\n    - ReadWriteOnce\n")),(0,r.kt)("p",null,"最后应用以上两个 yaml 文件："),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f mongo-local-storage.yaml\nkubectl apply -f sinoform-mongo-pvc.yaml\n")),(0,r.kt)("h3",{id:"32-自动创建本地存储卷"},"3.2. 自动创建本地存储卷"),(0,r.kt)("p",null,"可以使用 ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rancher/local-path-provisioner"},"rancher/local-path-provisioner")," 自动维护本地存储卷。"),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"提示")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"如果离线安装，需下载以下两个镜像："),(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"docker.io/library/busy"),(0,r.kt)("li",{parentName:"ul"},"docker.io/rancher/local-path-provisioner:v0.0.22")))),(0,r.kt)("p",null,"复制以下 yaml 配置，创建一个名称为 ",(0,r.kt)("inlineCode",{parentName:"p"},"local-path")," 的本地存储卷："),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="local-path-storage.yaml"',title:'"local-path-storage.yaml"'},'apiVersion: v1\nkind: Namespace\nmetadata:\n  name: local-path-storage\n\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: local-path-provisioner-service-account\n  namespace: local-path-storage\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: local-path-provisioner-role\nrules:\n  - apiGroups: [""]\n    resources: ["nodes", "persistentvolumeclaims", "configmaps"]\n    verbs: ["get", "list", "watch"]\n  - apiGroups: [""]\n    resources: ["endpoints", "persistentvolumes", "pods"]\n    verbs: ["*"]\n  - apiGroups: [""]\n    resources: ["events"]\n    verbs: ["create", "patch"]\n  - apiGroups: ["storage.k8s.io"]\n    resources: ["storageclasses"]\n    verbs: ["get", "list", "watch"]\n\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: local-path-storage\n\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: local-path-provisioner-service-account\n  namespace: local-path-storage\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: local-path-provisioner-role\nrules:\n  - apiGroups: [""]\n    resources: ["nodes", "persistentvolumeclaims", "configmaps"]\n    verbs: ["get", "list", "watch"]\n  - apiGroups: [""]\n    resources: ["endpoints", "persistentvolumes", "pods"]\n    verbs: ["*"]\n  - apiGroups: [""]\n    resources: ["events"]\n    verbs: ["create", "patch"]\n  - apiGroups: ["storage.k8s.io"]\n    resources: ["storageclasses"]\n    verbs: ["get", "list", "watch"]\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: local-path-provisioner-bind\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: local-path-provisioner-role\nsubjects:\n  - kind: ServiceAccount\n    name: local-path-provisioner-service-account\n    namespace: local-path-storage\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: local-path-provisioner\n  namespace: local-path-storage\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: local-path-provisioner\n  template:\n    metadata:\n      labels:\n        app: local-path-provisioner\n    spec:\n      serviceAccountName: local-path-provisioner-service-account\n      containers:\n        - name: local-path-provisioner\n          image: rancher/local-path-provisioner:v0.0.22\n          imagePullPolicy: IfNotPresent\n          command:\n            - local-path-provisioner\n            - --debug\n            - start\n            - --config\n            - /etc/config/config.json\n          volumeMounts:\n            - name: config-volume\n              mountPath: /etc/config/\n          env:\n            - name: POD_NAMESPACE\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.namespace\n      volumes:\n        - name: config-volume\n          configMap:\n            name: local-path-config\n\n---\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: local-path\nprovisioner: rancher.io/local-path\nvolumeBindingMode: WaitForFirstConsumer\nreclaimPolicy: Delete\n\n---\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: local-path-config\n  namespace: local-path-storage\ndata:\n  config.json: |-\n    {\n            "nodePathMap":[\n            {\n                    "node":"DEFAULT_PATH_FOR_NON_LISTED_NODES",\n                    "paths":["/opt/local-path-provisioner"]\n            }\n            ]\n    }\n  setup: |-\n    #!/bin/sh\n    set -eu\n    mkdir -m 0777 -p "$VOL_DIR"\n  teardown: |-\n    #!/bin/sh\n    set -eu\n    rm -rf "$VOL_DIR"\n  helperPod.yaml: |-\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: helper-pod\n    spec:\n      containers:\n      - name: helper-pod\n        image: busybox\n        imagePullPolicy: IfNotPresent\n')),(0,r.kt)("p",null,"应用以上的 yaml 配置文件："),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f local-path-storage.yaml\n")),(0,r.kt)("p",null,"然后调整 ",(0,r.kt)("inlineCode",{parentName:"p"},"sinoform-mongo-pvc"),"，绑定 ",(0,r.kt)("inlineCode",{parentName:"p"},"local-path")," 存储卷："),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'{6} title="sinoform-mongo-pvc.yaml"',"{6}":!0,title:'"sinoform-mongo-pvc.yaml"'},"apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: sinoform-mongo-pvc\nspec:\n  storageClassName: local-path\n  resources:\n    requests:\n      storage: 10Gi\n  volumeMode: Filesystem\n  accessModes:\n    - ReadWriteOnce\n")),(0,r.kt)("p",null,"应用以上的 yaml 配置文件："),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f sinoform-mongo-pvc.yaml\n")),(0,r.kt)("h2",{id:"四访问-mongo"},"四、访问 mongo"),(0,r.kt)("p",null,"在 ",(0,r.kt)("inlineCode",{parentName:"p"},"application.yaml")," 添加 mongo 连接信息："),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"spring:\n  data:\n    mongodb:\n      uri: mongodb://sinoform-mongo-srv/form\n")))}d.isMDXComponent=!0}}]);