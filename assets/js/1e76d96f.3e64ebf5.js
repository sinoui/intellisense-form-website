"use strict";(self.webpackChunkintellisense_form_docs=self.webpackChunkintellisense_form_docs||[]).push([[6974],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=l(t),f=o,d=p["".concat(c,".").concat(f)]||p[f]||m[f]||s;return t?r.createElement(d,i(i({ref:n},u),{},{components:t})):r.createElement(d,i({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,i=new Array(s);i[0]=p;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var l=2;l<s;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},36403:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var r=t(87462),o=t(63366),s=(t(67294),t(3905)),i=["components"],a={id:"sinoform-sdk-use-case",title:"用例"},c="用例",l={unversionedId:"sinoform-sdk-use-case",id:"sinoform-sdk-use-case",title:"用例",description:"流程流转事件获取下一办理人信息",source:"@site/docs/sinoform-sdk-use-case.md",sourceDirName:".",slug:"/sinoform-sdk-use-case",permalink:"/intellisense-form-website/docs/sinoform-sdk-use-case",tags:[],version:"current",frontMatter:{id:"sinoform-sdk-use-case",title:"用例"},sidebar:"someSidebar",previous:{title:"数据结构",permalink:"/intellisense-form-website/docs/sinoform-sdk-event-data"},next:{title:"对外扩展接口",permalink:"/intellisense-form-website/docs/extend-interface"}},u=[{value:"流程流转事件获取下一办理人信息",id:"流程流转事件获取下一办理人信息",children:[],level:2}],m={toc:u};function p(e){var n=e.components,t=(0,o.Z)(e,i);return(0,s.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"用例"},"用例"),(0,s.kt)("h2",{id:"流程流转事件获取下一办理人信息"},"流程流转事件获取下一办理人信息"),(0,s.kt)("p",null,"我们可以通过 FlowSendEvent 事件对象中携带的 workFlowResult 参数获取下一办理人信息。"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'package com.sinosoft.plugin.sinosoftplugin;\n\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport com.sinosoft.sdk.annotation.RemoteEventSubscribe;\nimport com.sinosoft.sdk.event.FlowSendEvent;\nimport com.sinosoft.sdk.model.User;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\n@Slf4j\n@Component\npublic class FlowSubscriber {\n\n  @RemoteEventSubscribe\n  public void getUserInfo(FlowSendEvent event) {\n    log.info("Hello event : " + event.toString());\n    JSONArray remindWriteVec = event.getWorkFlowResult().getJSONArray("remindWriteVec");\n    List<User> userList = remindWriteVec.stream()\n        .map(o -> (JSONObject) o)\n        .map(jsonObject -> {\n          User user = new User();\n          user.setId(jsonObject.getString("userid"));\n          user.setUserName(jsonObject.getString("userName"));\n          return user;\n        })\n        .collect(Collectors.toList());\n    userList.forEach(user -> {\n      System.out.println(user.getUserName());\n      System.out.println(user.getId());\n    });\n  }\n}\n')))}p.isMDXComponent=!0}}]);