"use strict";(self.webpackChunkintellisense_form_docs=self.webpackChunkintellisense_form_docs||[]).push([[9152],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return c}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var a=r.createContext({}),s=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},m=function(e){var n=s(e.components);return r.createElement(a.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,a=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=s(t),c=i,f=d["".concat(a,".").concat(c)]||d[c]||u[c]||l;return t?r.createElement(f,p(p({ref:n},m),{},{components:t})):r.createElement(f,p({ref:n},m))}));function c(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,p=new Array(l);p[0]=d;var o={};for(var a in n)hasOwnProperty.call(n,a)&&(o[a]=n[a]);o.originalType=e,o.mdxType="string"==typeof e?e:i,p[1]=o;for(var s=2;s<l;s++)p[s]=t[s];return r.createElement.apply(null,p)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},61959:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return a},metadata:function(){return s},toc:function(){return m},default:function(){return d}});var r=t(87462),i=t(63366),l=(t(67294),t(3905)),p=["components"],o={id:"guide-formfield",title:"开发一个表单控件"},a=void 0,s={unversionedId:"guide-formfield",id:"guide-formfield",title:"开发一个表单控件",description:"上个章节我们学会了如何开发一个流程按钮，本章节将学习如何开发表单控件（又称为表单字段）。一个表单控件至少由三个组件组成：",source:"@site/docs/guide-formfield.mdx",sourceDirName:".",slug:"/guide-formfield",permalink:"/intellisense-form-website/docs/guide-formfield",tags:[],version:"current",frontMatter:{id:"guide-formfield",title:"开发一个表单控件"},sidebar:"someSidebar",previous:{title:"开发一个按钮",permalink:"/intellisense-form-website/docs/guide-button"},next:{title:"详情页注册按钮",permalink:"/intellisense-form-website/docs/guide-button-in-detail-page"}},m=[{value:"介绍新的文本输入框",id:"介绍新的文本输入框",children:[],level:2},{value:"Hello, TextInput!",id:"hello-textinput",children:[{value:"初始实现 <code>render</code>",id:"初始实现-render",children:[],level:3},{value:"初始实现 <code>preview</code>",id:"初始实现-preview",children:[],level:3},{value:"初始实现 <code>config-panel</code>",id:"初始实现-config-panel",children:[],level:3},{value:"注册表单控件",id:"注册表单控件",children:[],level:3}],level:2},{value:"表单控件与表单联动",id:"表单控件与表单联动",children:[{value:"绑定 <code>name</code> 属性",id:"绑定-name-属性",children:[],level:3},{value:"名词解释：表单项",id:"名词解释表单项",children:[],level:3},{value:"值的双向绑定",id:"值的双向绑定",children:[],level:3},{value:"表单项只读控制",id:"表单项只读控制",children:[],level:3},{value:"标签与表单控件联动",id:"标签与表单控件联动",children:[],level:3},{value:"整合在一起",id:"整合在一起",children:[],level:3}],level:2},{value:"完善表单控件的配置面板",id:"完善表单控件的配置面板",children:[],level:2},{value:"在智能表单产品中调试插件",id:"在智能表单产品中调试插件",children:[],level:2}],u={toc:m};function d(e){var n=e.components,o=(0,i.Z)(e,p);return(0,l.kt)("wrapper",(0,r.Z)({},u,o,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"上个章节我们学会了如何开发一个流程按钮，本章节将学习如何开发表单控件（又称为表单字段）。一个表单控件至少由三个组件组成："),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"render")," —— 表单控件在表单中展现的组件"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"preview")," —— 表单控件在表单设计器中展现的组件"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"configPanel")," —— 表单控件在表单设计器的属性面板中展现的组件")),(0,l.kt)("p",null,"将通过创建一个新的文本输入框，来介绍如何实现上面介绍的三个组件，以在智能表单中开发一个自定义的表单控件。"),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"示例源码")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"本章节得示例代码可以在 ",(0,l.kt)("a",{parentName:"p",href:"https://gitee.com/sinoui/sinoform-plugins-web-component-examples/tree/master/src/plugins/form-field-custom-text-input"},"sinoform-plugins-web-component-examples/src/plugins/form-field-custom-text-input")," 中找到。"))),(0,l.kt)("h2",{id:"介绍新的文本输入框"},"介绍新的文本输入框"),(0,l.kt)("p",null,"本章节开发的文本输入框，在表单中展示的效果如下图所示："),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"教程中的文本输入框效果",src:t(16738).Z})),(0,l.kt)("p",null,"上图中在表单中出现的文本输入框，是通过 ",(0,l.kt)("inlineCode",{parentName:"p"},"render")," 组件渲染出来的。"),(0,l.kt)("p",null,"在表单设计器中展现的效果如下图所示："),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"教程中的文本输入框在设计器中的效果",src:t(35658).Z})),(0,l.kt)("p",null,"上图中三个部分是通过扩展配置定义出来的："),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"注册表单控件时指定的 ",(0,l.kt)("inlineCode",{parentName:"li"},"title")," 决定的"),(0,l.kt)("li",{parentName:"ol"},"通过 ",(0,l.kt)("inlineCode",{parentName:"li"},"preview")," 组件渲染出来的"),(0,l.kt)("li",{parentName:"ol"},"通过 ",(0,l.kt)("inlineCode",{parentName:"li"},"configPanel")," 组件渲染出来的")),(0,l.kt)("p",null,"在开发表单控件过程中，也可以通过设计器的预览功能查看文本输入框在表单中的展现效果，如下图所示："),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"教程中的文本输入框在设计器预览表单中的pc端效果",src:t(8331).Z})),(0,l.kt)("p",null,"也可以在预览中查看在移动端的展示效果，如下图所示："),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"教程中的文本输入框在设计器预览表单中的移动端效果",src:t(75001).Z})),(0,l.kt)("p",null,"接下来，我们照例从 ",(0,l.kt)("inlineCode",{parentName:"p"},"Hello, World!")," 开始，由浅入深地介绍如何入门表单控件的开发。"),(0,l.kt)("h2",{id:"hello-textinput"},"Hello, TextInput!"),(0,l.kt)("p",null,"本节以最快的速度，开发好自定义文本输入框的三个必要组件，并注册到智能表单中使用。让我们开始吧。"),(0,l.kt)("p",null,"首先创建三个组件，如下图所示："),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"📦src\n ┣ 📂plugins\n ┃ ┗ 📂form-field-custom-text-input\n ┃ ┃ ┣ 📂render\n ┃ ┃ ┃ ┣ 📜CustomTextInputRenderer.ts\n ┃ ┃ ┃ ┣ 📜CustomTextInputRenderer.css\n ┃ ┃ ┃ ┗ 📜index.ts\n ┃ ┃ ┣ 📂preview\n ┃ ┃ ┃ ┣ 📜index.ts\n ┃ ┃ ┃ ┗ 📜CustomTextInputPreview.ts\n ┃ ┃ ┣ 📂config-panel\n ┃ ┃ ┃ ┣ 📜CustomTextInputConfigPanel.ts\n ┃ ┃ ┃ ┗ 📜index.ts\n ┗ 📜index.ts\n")),(0,l.kt)("p",null,"创建完成后，我们按照之前章节的经验，依次初始实现 ",(0,l.kt)("a",{parentName:"p",href:"#%E5%88%9D%E5%A7%8B%E5%AE%9E%E7%8E%B0-render"},"render"),"、",(0,l.kt)("a",{parentName:"p",href:"#%E5%88%9D%E5%A7%8B%E5%AE%9E%E7%8E%B0-preview"},"preview")," 和 ",(0,l.kt)("a",{parentName:"p",href:"#%E5%88%9D%E5%A7%8B%E5%AE%9E%E7%8E%B0-config-panel"},"config-panel"),"。"),(0,l.kt)("h3",{id:"初始实现-render"},"初始实现 ",(0,l.kt)("inlineCode",{parentName:"h3"},"render")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/plugins/form-field-custom-text-input/render/CustomTextInputRenderer.ts"',title:'"src/plugins/form-field-custom-text-input/render/CustomTextInputRenderer.ts"'},'import { SinoFormElement } from "@sinoform/plugin-sinoform-helpers";\nimport "./CustomTextInputRenderer.css";\n\n/**\n * 自定义文本框在表单中展示的组件\n */\nexport default class CustomTextInputRenderer extends SinoFormElement {\n  override render() {\n    this.innerHTML = `<input class="custom-text-input" />`;\n  }\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="src/plugins/form-field-custom-text-input/render/CustomTextInputRenderer.css"',title:'"src/plugins/form-field-custom-text-input/render/CustomTextInputRenderer.css"'},".custom-text-input {\n  display: block;\n  line-height: inherit;\n  font: inherit;\n  color: inherit;\n  -webkit-letter-spacing: inherit;\n  -moz-letter-spacing: inherit;\n  -ms-letter-spacing: inherit;\n  letter-spacing: inherit;\n  box-sizing: content-box;\n  background: none;\n  margin: 0px;\n  -webkit-tap-highlight-color: transparent;\n  min-width: 0px;\n  width: 100%;\n  flex: 1 1 auto;\n  padding: 3.5px 0 4.5px;\n  height: 1.5em;\n  min-height: 1.5em;\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/plugins/form-field-custom-text-input/render/index.ts"',title:'"src/plugins/form-field-custom-text-input/render/index.ts"'},'import { wrapperWebComponent } from "@sinoform/plugin-sinoform-helpers";\nimport CustomTextInputRenderer from "./CustomTextInputRenderer";\n\n// 包装成React组件并默认导出\nexport default wrapperWebComponent(\n  "form-field-custom-input-renderer",\n  CustomTextInputRenderer\n);\n')),(0,l.kt)("h3",{id:"初始实现-preview"},"初始实现 ",(0,l.kt)("inlineCode",{parentName:"h3"},"preview")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/plugins/form-field-custom-text-input/preview/CustomTextInputPreview.ts"',title:'"src/plugins/form-field-custom-text-input/preview/CustomTextInputPreview.ts"'},'import { SinoFormElement } from "@sinoform/plugin-sinoform-helpers";\n\n/**\n * 自定义文本框在表单设计器中预览组件\n */\nexport default class CustomTextInputPreview extends SinoFormElement {\n  override render() {\n    this.innerHTML = "<div>自定义文本框预览图</div>";\n  }\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/plugins/form-field-custom-text-input/preview/index.ts"',title:'"src/plugins/form-field-custom-text-input/preview/index.ts"'},'import { wrapperWebComponent } from "@sinoform/plugin-sinoform-helpers";\nimport CustomTextInputPreview from "./CustomTextInputPreview";\n\n// 将web components组件封装成react组件\nexport default wrapperWebComponent(\n  "field-custom-text-input-preview",\n  CustomTextInputPreview\n);\n')),(0,l.kt)("h3",{id:"初始实现-config-panel"},"初始实现 ",(0,l.kt)("inlineCode",{parentName:"h3"},"config-panel")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/plugins/form-field-custom-text-input/config-panel/CustomTextInputConfigPanel.ts"',title:'"src/plugins/form-field-custom-text-input/config-panel/CustomTextInputConfigPanel.ts"'},'import { SinoFormElement } from "@sinoform/plugin-sinoform-helpers";\n\n/**\n * 自定义文本框在表单设计器中的字段属性面板组件\n */\nexport default class CustomTextInputConfigPanel extends SinoFormElement {\n  override render() {\n    this.innerHTML = "<div>自定义文本输入框的字段属性面板</div>";\n  }\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/plugins/form-field-custom-text-input/config-panel/index.ts"',title:'"src/plugins/form-field-custom-text-input/config-panel/index.ts"'},'import { wrapperWebComponent } from "@sinoform/plugin-sinoform-helpers";\nimport CustomTextInputConfigPanel from "./CustomTextInputConfigPanel";\n\n// 将web components组件封装成react组件\nexport default wrapperWebComponent(\n  "field-custom-text-input-config-panel",\n  CustomTextInputConfigPanel\n);\n')),(0,l.kt)("h3",{id:"注册表单控件"},"注册表单控件"),(0,l.kt)("p",null,"打开 ",(0,l.kt)("inlineCode",{parentName:"p"},"src/index.ts")," 文件，添加注册代码，如下所示："),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'import AppSetting from "@sinoform/app-setting";\nimport { FormFieldGroup } from "@sinoform/types";\nimport EventNote from "@sinoui/icons/EventNote";\n\n// 注册 custom-text-input 表单控件\nAppSetting.formConfig.addField({\n  // 表单控件类型（相当于表单控件的唯一身份标识，不能重复）\n  type: "custom-text-input",\n  // 表单控件在设计器控件面板中的名称\n  title: "自定义单行文本",\n  // 表单控件在设计器控件面板中的分组\n  group: FormFieldGroup.normal,\n  // 指定表单控件在设计器的控件面板中的显示图标\n  icon: EventNote,\n  render: React.lazy(() => import("./plugins/form-field-input/render")),\n  preview: React.lazy(() => import("./plugins/form-field-input/preview")),\n  configPanel: React.lazy(\n    () => import("./plugins/form-field-input/config-panel")\n  ),\n});\n')),(0,l.kt)("p",null,"注册之后，即可启动插件项目，在智能表单设计器中使用此插件，查看表单控件的初始效果。"),(0,l.kt)("p",null,"目前我们只是开发出了表单控件的初始效果，但是还有重要的两件事情需要处理，即："),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"表单控件与表单联动，包括值的双向绑定、表单项只读控制、标签与输入框的联动等"),(0,l.kt)("li",{parentName:"ul"},"给表单控件添加合适的属性配置项，这样在使用设计器设计表单时，可以定制表单控件的行为")),(0,l.kt)("p",null,"接下来，我们一一讲解这些内容。"),(0,l.kt)("h2",{id:"表单控件与表单联动"},"表单控件与表单联动"),(0,l.kt)("p",null,"表单控件需要与表单之间进行联动，才能在智能表单中完成它的基本功能。本节将会介绍以下四个方面的内容："),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#%E7%BB%91%E5%AE%9A-name-%E5%B1%9E%E6%80%A7"},"绑定 ",(0,l.kt)("inlineCode",{parentName:"a"},"name")," 属性")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#%E5%80%BC%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A"},"值的双向绑定")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#%E8%A1%A8%E5%8D%95%E9%A1%B9%E5%8F%AA%E8%AF%BB%E6%8E%A7%E5%88%B6"},"表单项只读控制")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#%E6%A0%87%E7%AD%BE%E4%B8%8E%E8%A1%A8%E5%8D%95%E6%8E%A7%E4%BB%B6%E8%81%94%E5%8A%A8"},"标签与表单控件联动"))),(0,l.kt)("p",null,"注：本节所有的内容均是在增强 ",(0,l.kt)("inlineCode",{parentName:"p"},"CustomTextInputRenderer")," 组件的代码。"),(0,l.kt)("h3",{id:"绑定-name-属性"},"绑定 ",(0,l.kt)("inlineCode",{parentName:"h3"},"name")," 属性"),(0,l.kt)("p",null,"在渲染表单控件的 HTML 时，可以从属性对象中获取到 ",(0,l.kt)("inlineCode",{parentName:"p"},"name"),"，并指定给 ",(0,l.kt)("inlineCode",{parentName:"p"},"input")," 元素，如下所示："),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/plugins/form-field-custom-text-input/render/CustomTextInputRenderer.ts" {5}',title:'"src/plugins/form-field-custom-text-input/render/CustomTextInputRenderer.ts"',"{5}":!0},'class CustomTextInputRenderer extends SinoFormElement {\n  override render() {\n    const { name } = this.props;\n\n    this.innerHTML = `<input class="custom-text-input" name="${name}" />`;\n  }\n}\n')),(0,l.kt)("p",null,"这里的 ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," 是来自表单设计器字段属性配置面板的",(0,l.kt)("strong",{parentName:"p"},"标识"),"，如下图所示："),(0,l.kt)("p",null,(0,l.kt)("img",{src:t(12306).Z})),(0,l.kt)("p",null,"备注：后面会讲到如何定义配置面板。"),(0,l.kt)("h3",{id:"名词解释表单项"},"名词解释：表单项"),(0,l.kt)("p",null,"在讲值的双向绑定之前，先解释一个名词：",(0,l.kt)("strong",{parentName:"p"},"表单项"),"。在智能表单中，将表单控件拖拽到表单中，就形成了一个",(0,l.kt)("strong",{parentName:"p"},"表单项"),"。",(0,l.kt)("strong",{parentName:"p"},"表单项"),"最重要的两个属性是："),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"表单控件类型，即表单项对应的表单控件（",(0,l.kt)("inlineCode",{parentName:"li"},"type"),"）"),(0,l.kt)("li",{parentName:"ul"},"表单项标识，在字段属性面板中定义，也称为表单项名称（",(0,l.kt)("inlineCode",{parentName:"li"},"name"),"）")),(0,l.kt)("p",null,"一个表单项有了以上两个基本属性，就可以用正确的表单控件在表单中展现正确的表单字段值。"),(0,l.kt)("h3",{id:"值的双向绑定"},"值的双向绑定"),(0,l.kt)("p",null,"值的双向绑定是指将表单项的值与表单状态之间进行绑定："),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"第一个方向：表单状态中的值发生了变化，需要同步到表单项，让表单项对应的表单控件显示最新的表单状态中的值。例如在打开详情页时，加载到详情页数据，表单状态中就有从后端获取到的所有表单项的值。这时就需要表单控件展示正确的来自后端的表单项值。"),(0,l.kt)("li",{parentName:"ul"},"第二个方向：用户在表单控件中输入了文本，或者做出了选项选择（例如下拉选择框）后，需要将新的值同步给表单状态。")),(0,l.kt)("p",null,"表单状态中存储了所有表单项的值。表单状态是一个对象，类似下面的示例对象："),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "field_1": "这是一个标题",\n  "field_2": "选项一",\n  "field_5": "这是一个文本"\n}\n')),(0,l.kt)("p",null,"上面的示例对象包含了 ",(0,l.kt)("inlineCode",{parentName:"p"},"field_1"),"、 ",(0,l.kt)("inlineCode",{parentName:"p"},"field_2")," 和 ",(0,l.kt)("inlineCode",{parentName:"p"},"field_5")," 表单项的值。我们可以通过表单项名称从表单状态中获取到表单项的值。"),(0,l.kt)("p",null,"解释这么多，是为了让大家了解智能表单处理表单值的基本过程。我们改进 ",(0,l.kt)("inlineCode",{parentName:"p"},"CustomTextInputRenderer")," 的代码，实现值的双向绑定："),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/plugins/form-field-custom-text-input/render/CustomTextInputRenderer.ts" {7,14}',title:'"src/plugins/form-field-custom-text-input/render/CustomTextInputRenderer.ts"',"{7,14}":!0},'import $ from "jQuery";\n\nclass CustomTextInputRenderer extends SinoFormElement {\n  override render() {\n    const { name, value = "" } = this.props;\n\n    this.innerHTML = `<input class="custom-text-input" value="${value}" />`;\n\n    const $input = $("input", this);\n\n    // 值的双向绑定\n    // 1. 监听 this.props 中的 value 属性值变更，同步到 $input 中\n    // 2. 监听 $input 中的 change 事件，将用户输入的值通过 this.props.onChange 告知智能表单\n    this.bindFormControl($input);\n  }\n}\n')),(0,l.kt)("h3",{id:"表单项只读控制"},"表单项只读控制"),(0,l.kt)("p",null,"智能表单会给表单控件的",(0,l.kt)("inlineCode",{parentName:"p"},"render"),"组件传递 ",(0,l.kt)("inlineCode",{parentName:"p"},"readOnly")," 属性，告知表单控件当前是只读的还是可编辑的。我们优化 ",(0,l.kt)("inlineCode",{parentName:"p"},"CustomTextInputRenderer")," 的代码，以实现只读控制："),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/plugins/form-field-custom-text-input/render/CustomTextInputRenderer.ts"',title:'"src/plugins/form-field-custom-text-input/render/CustomTextInputRenderer.ts"'},'import $ from "jQuery";\n\nclass CustomTextInputRenderer extends SinoFormElement {\n  override render() {\n    const { readOnly } = this.props;\n\n    this.innerHTML = `<input class="custom-text-input" ${\n      readOnly ? `readonly="readonly"` : ""\n    } />`;\n\n    const $input = $("input", this);\n\n    // 监听 readOnly 属性值的变化，同步设置 input 元素的 readonly\n    this.props.watch("readOnly", (readOnly) => {\n      if (readOnly) {\n        $input.attr("readonly", "readonly");\n      } else {\n        $input.removeAttr("readonly");\n      }\n    });\n  }\n}\n')),(0,l.kt)("h3",{id:"标签与表单控件联动"},"标签与表单控件联动"),(0,l.kt)("p",null,"为了更好的用户体验，我们需要将表单项中的标签与表单控件进行联动，如下所示："),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<div>\n  <label for="userName">用户名</label>\n  <input id="userName" />\n</div>\n')),(0,l.kt)("p",null,"上面的示例代码中，",(0,l.kt)("inlineCode",{parentName:"p"},"label")," 元素的 ",(0,l.kt)("inlineCode",{parentName:"p"},"for")," 属性和 ",(0,l.kt)("inlineCode",{parentName:"p"},"input")," 元素的 ",(0,l.kt)("inlineCode",{parentName:"p"},"id")," 属性是相同的，它们之间就绑定了，形成联动效果，例如：当点击 ",(0,l.kt)("inlineCode",{parentName:"p"},"label")," 标签，绑定的 ",(0,l.kt)("inlineCode",{parentName:"p"},"input")," 会自动获取到焦点。"),(0,l.kt)("p",null,"智能表单会渲染出每个表单项的标签和 ",(0,l.kt)("inlineCode",{parentName:"p"},"for")," 属性值，并给表单控件组件传递 ",(0,l.kt)("inlineCode",{parentName:"p"},"id")," 属性值，所以我们只需要在实现表单控件的 ",(0,l.kt)("inlineCode",{parentName:"p"},"render")," 组件时，从 ",(0,l.kt)("inlineCode",{parentName:"p"},"this.props")," 中获取到 ",(0,l.kt)("inlineCode",{parentName:"p"},"id"),"，并指定给 ",(0,l.kt)("inlineCode",{parentName:"p"},"input")," 元素即可。如下面的代码所示："),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/plugins/form-field-custom-text-input/render/CustomTextInputRenderer.ts" {5}',title:'"src/plugins/form-field-custom-text-input/render/CustomTextInputRenderer.ts"',"{5}":!0},'class CustomTextInputRenderer extends SinoFormElement {\n  override render() {\n    const { id } = this.props;\n\n    this.innerHTML = `<input class="custom-text-input" id="${id}" />`;\n  }\n}\n')),(0,l.kt)("h3",{id:"整合在一起"},"整合在一起"),(0,l.kt)("p",null,"现在，我们将上面的代码整合在一起，形成一个完整的 ",(0,l.kt)("inlineCode",{parentName:"p"},"CustomTextInputRenderer")," 实现，如下所示："),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/plugins/form-field-custom-text-input/render/CustomTextInputRenderer.ts"',title:'"src/plugins/form-field-custom-text-input/render/CustomTextInputRenderer.ts"'},'import $ from "jquery";\nimport { SinoFormElement } from "@sinoform/plugin-sinoform-helpers";\nimport "./CustomTextInputRenderer.css";\n\n/**\n * 自定义文本框在表单中展示的组件\n */\nexport default class CustomTextInputRenderer extends SinoFormElement {\n  override render() {\n    const { value = "", readOnly, id, name } = this.props;\n    this.innerHTML = `<input class="custom-text-input" name="${name}" id="${id}" value="${value}" ${\n      readOnly ? `readonly="readonly"` : ""\n    } />`;\n    const $input = $("input", this);\n\n    // 值的双向绑定\n    // 1. 监听 this.props 中的 value 属性值变更，同步到 $input 中\n    // 2. 监听 $input 中的 change 事件，将用户输入的值通过 this.props.onChange 告知智能表单\n    this.bindFormControl($input);\n\n    // 监听 readOnly 属性值变更\n    this.props.watch("readOnly", (readOnly) => {\n      if (readOnly) {\n        $input.attr("readonly", "readonly");\n      } else {\n        $input.removeAttr("readonly");\n      }\n    });\n  }\n}\n')),(0,l.kt)("p",null,"至此，我们开发出了功能完整的表单控件，快在智能表单中查看一下效果吧。"),(0,l.kt)("h2",{id:"完善表单控件的配置面板"},"完善表单控件的配置面板"),(0,l.kt)("p",null,"接下来我们需要在配置面板中添加一些表单控件的配置项。可以使用 jQuery 开发配置面板组件，但是目前智能表单没有发布用来构建配置面板的 Web Component 组件，如果要求您通过 jQuery 和 CSS 开发出一套与智能表单保持风格一致的配置面板，工作量有点大。所以我们目前推荐您直接使用智能表单封装好的 React 组件来快速实现表单控件的配置面板。"),(0,l.kt)("p",null,"我们调整 ",(0,l.kt)("inlineCode",{parentName:"p"},"config-panel/index.ts")," 和 ",(0,l.kt)("inlineCode",{parentName:"p"},"config-panel/CustomTextInputConfigPanel.ts")," 两个文件的内容："),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/plugins/form-field-custom-text-input/config-panel/index.ts"',title:'"src/plugins/form-field-custom-text-input/config-panel/index.ts"'},'import CustomTextInputConfigPanel from "./CustomTextInputConfigPanel";\n\nexport default CustomTextInputConfigPanel;\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/plugins/form-field-custom-text-input/config-panel/CustomTextInputConfigPanel.tsx"',title:'"src/plugins/form-field-custom-text-input/config-panel/CustomTextInputConfigPanel.tsx"'},'import React from "react";\nimport TextInput from "@sinoui/core/TextInput";\nimport { FormItem } from "@sinoui/rx-core-form";\nimport type { FormFieldConfigPanelProps } from "@sinoform/types";\n\n/**\n * 定义 custom-text-input 配置面板的组件\n */\nexport default function CustomTextInputConfigPanel({\n  inSubform,\n}: FormFieldConfigPanelProps) {\n  return (\n    <>\n      <FormItem label="标题" name="title" required>\n        <TextInput />\n      </FormItem>\n      <FormItem label="标识" name="fieldName" required>\n        <TextInput />\n      </FormItem>\n      {!inSubform && (\n        <FormItem label="字段描述" name="helperText">\n          <TextInput multiline />\n        </FormItem>\n      )}\n    </>\n  );\n}\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"注意：我们需要将 ",(0,l.kt)("inlineCode",{parentName:"p"},"CustomTextInputConfigPanel.ts")," 文件的后缀改成 ",(0,l.kt)("inlineCode",{parentName:"p"},".tsx"),"。")),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"敬请期待")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"在不久的将来（数周内），我们会在 API 文档中说明配置面板中有哪些可用的 React 组件。您以后可以参考 API 文档中的组件清单，快速定制出您需要的表单控件配置面板。"))),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"小知识点")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"您可以通过 ",(0,l.kt)("inlineCode",{parentName:"p"},"render")," 组件的 ",(0,l.kt)("inlineCode",{parentName:"p"},"config")," 属性获取到表单项在设计器中的配置，如下所示："),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'class CustomTextInputRenderer extends SinoFormElement {\n  override render() {\n    const { config } = this.props;\n\n    console.log("表单项的配置", config);\n  }\n}\n')))),(0,l.kt)("p",null,"至此，我们开发出了一个完整的表单控件。接下来您可以在智能表单产品中调试该表单控件。"),(0,l.kt)("h2",{id:"在智能表单产品中调试插件"},"在智能表单产品中调试插件"),(0,l.kt)("p",null,"打开",(0,l.kt)("a",{parentName:"p",href:"http://121.30.232.162:18880/sso/"},"登录页"),"，使用账号 ",(0,l.kt)("inlineCode",{parentName:"p"},"智能表单管理员"),"（密码是：",(0,l.kt)("inlineCode",{parentName:"p"},"1qaz2wsx!"),"） 登录系统，然后选择表单设计器，进入智能表单管理页面。"),(0,l.kt)("p",null,"打开表单",(0,l.kt)("inlineCode",{parentName:"p"},"演示自定义表单项"),"，在表单设计界面可以在左侧的基础字段中看到新增的自定义表单项，拖动它到中间区域就可以完整自定义表单项的添加。"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"设计界面",src:t(65439).Z})),(0,l.kt)("p",null,"打开预览界面就可以实时测试自定义表单项的功能。"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"预览界面",src:t(15441).Z})),(0,l.kt)("p",null,"进入产品示例系统，在",(0,l.kt)("inlineCode",{parentName:"p"},"演示自定义表单项"),"的表单详情页中也可以测试自定义表单项。"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"详情界面",src:t(65998).Z})))}d.isMDXComponent=!0},65439:function(e,n,t){n.Z=t.p+"assets/images/custominput-in-design-4edd7f88c7d740451d3c4f558f3eacd5.png"},65998:function(e,n,t){n.Z=t.p+"assets/images/custominput-in-detail-17d7db27ebb1328daf31aa7d1098c13a.png"},15441:function(e,n,t){n.Z=t.p+"assets/images/custominput-in-preview-d21f0be31875dc41ee10d20abbbf338e.png"},75001:function(e,n,t){n.Z=t.p+"assets/images/custom-text-input-in-design-mobile-preview-14ec9c5cc56cdd51da5e083fd17567fe.png"},8331:function(e,n,t){n.Z=t.p+"assets/images/custom-text-input-in-design-preview-a784489b6c014541d9fbfc5424209c41.png"},35658:function(e,n,t){n.Z=t.p+"assets/images/custom-text-input-in-design-f9f8a4fe08e8220906471bae75ab57ae.png"},16738:function(e,n,t){n.Z=t.p+"assets/images/custom-text-input-in-form-035bbefffb64179050f3642fcac5891f.png"},12306:function(e,n,t){n.Z=t.p+"assets/images/custom-text-input-name-setting-d408c1c720a07c9ac4e05fc4aba98722.png"}}]);