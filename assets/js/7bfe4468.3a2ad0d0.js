"use strict";(self.webpackChunkintellisense_form_docs=self.webpackChunkintellisense_form_docs||[]).push([[6695],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,f=p["".concat(s,".").concat(d)]||p[d]||m[d]||i;return n?o.createElement(f,l(l({ref:t},c),{},{components:n})):o.createElement(f,l({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=p;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:r,l[1]=a;for(var u=2;u<i;u++)l[u]=n[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},99004:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return c},default:function(){return p}});var o=n(87462),r=n(63366),i=(n(67294),n(3905)),l=["components"],a={id:"guide-form-button",title:"定制表单按钮组件"},s=void 0,u={unversionedId:"guide-form-button",id:"guide-form-button",title:"定制表单按钮组件",description:"不同于流程按钮，表单按钮是在表单详情页中表单项布局区域展示的按钮，通常它可以用来完成一些特定的 UI 交互动作，实现特定的业务逻辑功能。设计界面添加完表单按钮之后，我们只是完成了布局方面的设置，如果想要它发挥功能，还要搭配插件项目给按钮绑定功能。",source:"@site/docs/guide-form-button.md",sourceDirName:".",slug:"/guide-form-button",permalink:"/intellisense-form-website/docs/guide-form-button",tags:[],version:"current",frontMatter:{id:"guide-form-button",title:"定制表单按钮组件"},sidebar:"someSidebar",previous:{title:"控制表单页上的按钮和表单项",permalink:"/intellisense-form-website/docs/guide-control-button-formitem"},next:{title:"定制表单项的布局配置",permalink:"/intellisense-form-website/docs/guide-form-field-layout"}},c=[{value:"如何在插件项目中使用",id:"如何在插件项目中使用",children:[{value:"子表单中的表单按钮功能扩展",id:"子表单中的表单按钮功能扩展",children:[],level:3}],level:2}],m={toc:c};function p(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"不同于流程按钮，表单按钮是在表单详情页中表单项布局区域展示的按钮，通常它可以用来完成一些特定的 UI 交互动作，实现特定的业务逻辑功能。设计界面添加完表单按钮之后，我们只是完成了布局方面的设置，如果想要它发挥功能，还要搭配插件项目给按钮绑定功能。"),(0,i.kt)("h2",{id:"如何在插件项目中使用"},"如何在插件项目中使用"),(0,i.kt)("p",null,"前提是我们需要在表单设计界面中添加表单按钮，然后我们才可以在插件项目中为指定的按钮绑定方法。"),(0,i.kt)("p",null,"下面我们来实现一个小需求，点击按钮，打开一个弹窗，在这个弹窗内部获取当前表单值，并显示表单项 field_1 的值"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"创建表单按钮的逻辑文档，为指定的表单按钮添加业务逻辑")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/plugins/extends-form-button/index.tsx"',title:'"src/plugins/extends-form-button/index.tsx"'},'import React from "react";\nimport appSetting from "@sinoform/app-setting";\nimport { globalPortalManager } from "@sinoform/app-core";\n\nimport DemoDialog from "./DemoDialog";\n\n// 打开弹窗\nfunction renderPage(formState: any) {\n  // 生成临时id\n  const modalId = Math.random().toString(16).slice(2);\n  console.log("modalId", modalId);\n  const dialog = (\n    <DemoDialog\n      formState={formState}\n      onRequestClose={() => globalPortalManager.hidePortal(modalId)}\n    />\n  );\n\n  return globalPortalManager.showPortal(modalId, dialog);\n}\n\n// 创建表单监听\nappSetting.hooks.detailPage.tap("监听表单按钮的事件", (detailPage) => {\n  const { hooks, formData, formState } = detailPage;\n  const { formDesign: { id } = {} } = formData;\n\n  if (id === "62611cc481b95cd6e3d913aa") {\n    // 监听该表单中所有表单按钮的点击事件， 我们给field_2对应的表单按钮添加弹窗实现\n    hooks.fieldButtonClick.tap("表单按钮点击事件", (fieldId) => {\n      if (fieldId === "field_2") {\n        renderDialog(formState);\n      }\n    });\n  }\n});\n')),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"创建弹窗组件，展示 field_1 的值")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/plugins/extends-form-button/DemoDialog.tsx"',title:'"src/plugins/extends-form-button/DemoDialog.tsx"'},'import React from "react";\nimport Button from "@sinoui/core/Button";\nimport Dialog from "@sinoui/core/Dialog";\nimport DialogActions from "@sinoui/core/DialogActions";\nimport DialogContent from "@sinoui/core/DialogContent";\nimport DialogTitle from "@sinoui/core/DialogTitle";\n\nexport interface Props {\n  formState: any;\n  onRequestClose: () => void;\n}\n\nexport default function DemoDialog({ onRequestClose, formState }: Props) {\n  return (\n    <Dialog\n      open\n      onRequestClose={onRequestClose}\n      showCloseIcon\n      className="sinoform-show-draft-form-dialog"\n    >\n      <DialogTitle>测试弹窗</DialogTitle>\n      <DialogContent>\n        <>{formState?.values?.field_1}</>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onRequestClose}>取消</Button>\n        <Button onClick={onRequestClose}>确定</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n')),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"在插件的入口文件中引用该业务逻辑文件")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/index.ts"',title:'"src/index.ts"'},'import "./plugins/extends-form-button";\n')),(0,i.kt)("h3",{id:"子表单中的表单按钮功能扩展"},"子表单中的表单按钮功能扩展"),(0,i.kt)("p",null,"为了方便表单按钮在子表单中使用，",(0,i.kt)("inlineCode",{parentName:"p"},"fieldButtonClick"),"中回调函数的参数做了扩展，在原有的 ",(0,i.kt)("inlineCode",{parentName:"p"},"fieldId")," 基础上，新增了",(0,i.kt)("inlineCode",{parentName:"p"},"parentFieldName"),"和",(0,i.kt)("inlineCode",{parentName:"p"},"rowIdx"),"两个参数，两个参数可用于获取按钮所在行的数据。"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'hooks.fieldButtonClick.tap(\n  "表单按钮点击事件",\n  (\n    fieldId: string,\n    parentFieldName: string | undefined,\n    rowIdx: number | undefined\n  ) => {\n    console.log(\n      "表单按钮的id",\n      fieldId,\n      "父表单的fieldName",\n      parentFieldName,\n      "当前点击的表单按钮在子表单中的第几行",\n      rowIdx\n    );\n  }\n);\n')),(0,i.kt)("p",null,"接下来我们就可以在业务系统中测试按钮的点击效果了。上文示例中的需求比较简单，其实我们可以通过详情页上下文中的数据做非常多的事情，比如拿到表单数据之后我们可以根据数据请求后端接口实现一些我们自己的业务操作，具体的功能实现项目组可以根据自己的业务需求实现。"))}p.isMDXComponent=!0}}]);