"use strict";(self.webpackChunkintellisense_form_docs=self.webpackChunkintellisense_form_docs||[]).push([[8447],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return k}});var a=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var o=a.createContext({}),u=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=u(e.components);return a.createElement(o.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},s=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),s=u(t),k=l,g=s["".concat(o,".").concat(k)]||s[k]||m[k]||r;return t?a.createElement(g,i(i({ref:n},d),{},{components:t})):a.createElement(g,i({ref:n},d))}));function k(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,i=new Array(r);i[0]=s;var p={};for(var o in n)hasOwnProperty.call(n,o)&&(p[o]=n[o]);p.originalType=e,p.mdxType="string"==typeof e?e:l,i[1]=p;for(var u=2;u<r;u++)i[u]=t[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}s.displayName="MDXCreateElement"},6828:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return p},contentTitle:function(){return o},metadata:function(){return u},toc:function(){return d},default:function(){return s}});var a=t(87462),l=t(63366),r=(t(67294),t(3905)),i=["components"],p={id:"plugin-field",title:"新增表单字段"},o=void 0,u={unversionedId:"plugin-field",id:"plugin-field",title:"新增表单字段",description:"表单字段目录结构",source:"@site/docs/plugin-field.md",sourceDirName:".",slug:"/plugin-field",permalink:"/intellisense-form-website/docs/plugin-field",tags:[],version:"current",frontMatter:{id:"plugin-field",title:"新增表单字段"},sidebar:"someSidebar",previous:{title:"appSetting的使用",permalink:"/intellisense-form-website/docs/use-app-setting"},next:{title:"新增流程按钮",permalink:"/intellisense-form-website/docs/plugin-button"}},d=[{value:"表单字段目录结构",id:"表单字段目录结构",children:[],level:2},{value:"通用表单字段组件的开发方式",id:"通用表单字段组件的开发方式",children:[{value:"react 方式开发",id:"react-方式开发",children:[],level:3},{value:"vue 方式开发",id:"vue-方式开发",children:[],level:3},{value:"jQuery 方式开发",id:"jquery-方式开发",children:[],level:3}],level:2},{value:"属性面板开发",id:"属性面板开发",children:[{value:"监听表单属性值",id:"监听表单属性值",children:[],level:3},{value:"值关联",id:"值关联",children:[],level:3}],level:2},{value:"注册表单字段",id:"注册表单字段",children:[{value:"react 组件注册方式",id:"react-组件注册方式",children:[],level:3},{value:"vue 组件注册方式",id:"vue-组件注册方式",children:[{value:"vue 组件的字段预览和渲染组件",id:"vue-组件的字段预览和渲染组件",children:[],level:4}],level:3},{value:"jQuery 方式",id:"jquery-方式",children:[{value:"字段预览和渲染组件",id:"字段预览和渲染组件",children:[],level:4}],level:3}],level:2},{value:"字段配置",id:"字段配置",children:[],level:2}],m={toc:d};function s(e){var n=e.components,t=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"表单字段目录结构"},"表单字段目录结构"),(0,r.kt)("p",null,"在 plugins 目录下新增以",(0,r.kt)("inlineCode",{parentName:"p"},"field-xxx"),"命名的文件夹，比如图片上传字段：",(0,r.kt)("inlineCode",{parentName:"p"},"field-image-upload"),"。"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"xxx-plugins\n|__ src\n    |__ index.tsx\n    |__ plugins\n        |__ field-xxx\n            |__ xxxPreview.tsx //预览组件\n            |__ xxxRenderer.tsx  //在表单中的渲染组件\n            |__ xxxSubformRenderer.tsx //在子表单中的渲染组件\n            |__ xxxConfigPanel.tsx  // 字段属性配置面板\n            |__ xxxReadonlyRenderer.tsx // 只读渲染组件\n            |__ index.ts // 组件的导出配置\n")),(0,r.kt)("h2",{id:"通用表单字段组件的开发方式"},"通用表单字段组件的开发方式"),(0,r.kt)("h3",{id:"react-方式开发"},"react 方式开发"),(0,r.kt)("p",null,"自定义表单字段组件会传入以下常用属性："),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"属性名称"),(0,r.kt)("th",{parentName:"tr",align:null},"含义"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"config"),(0,r.kt)("td",{parentName:"tr",align:null},"字段配置对象")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"name"),(0,r.kt)("td",{parentName:"tr",align:null},"字段作为表单项的字段标识")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null},"字段作为表单项的值")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onChange"),(0,r.kt)("td",{parentName:"tr",align:null},"字段值更改的回调函数")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"readOnly"),(0,r.kt)("td",{parentName:"tr",align:null},"字段作为表单项时是否只读")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disable"),(0,r.kt)("td",{parentName:"tr",align:null},"字段作为表单项时是否只读")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isMobile"),(0,r.kt)("td",{parentName:"tr",align:null},"字段作为表单项时是否是在移动端渲染")))),(0,r.kt)("p",null,"在表单字段组件中可以使用",(0,r.kt)("inlineCode",{parentName:"p"},"@sinoui/rx-form-state"),"中的",(0,r.kt)("inlineCode",{parentName:"p"},"useFormStateContext"),"获取表单状态，以便做一些复杂的操作。\n示例："),(0,r.kt)("p",null,"如",(0,r.kt)("inlineCode",{parentName:"p"},"序号字段"),"组件。"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'function FieldSerialNumberRenderer(props: FormFieldRenderProps) {\n  const { config, name, readOnly, preview, value, ...rest } = props;\n  const { fieldName, expression, genType, sequenceTypeId, time, dept } = config;\n const formState = useFormStateContext();\n  ....\n\n /**\n   * 生成序号 + 占用 + 保存\n   */\n  const genSequence = useEventCallback(async () => {\n    .....\n\n    // 生成序号值后 需要同时将序号值更新表单数据\n    detailPage?.formHelpers?.save({\n      ...formState.values,\n      [name]: value,\n    });\n  });\n\n  useEffect(() => {\n    // 没有调用过自动占用序号接口\n    if (genType === "1" ) {\n      genSequence();\n    }\n  }, [genType]);\n\n  // 手动生成并占用\n  const onClick = async () => {\n    await genSequence();\n  };\n\n  return (\n    <Wrapper>\n      <TextInput\n        {...rest}\n        value={value}\n        name={name}\n        inputProps={{ "data-testid": "field-inputserail-number" }}\n        readOnly\n      />\n      {genType === "0" && !readOnly && (\n        <LoadingButton outlined onClick={onClick} disabled={!!value}>\n          生成并占用\n        </LoadingButton>\n      )}\n    </Wrapper>\n  );\n}\n')),(0,r.kt)("h3",{id:"vue-方式开发"},"vue 方式开发"),(0,r.kt)("p",null,"vue 方式的自定义表单字段组件除接收 react 方式支持的属性外，还接收以下属性："),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"属性名称"),(0,r.kt)("th",{parentName:"tr",align:null},"含义"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"appInfo"),(0,r.kt)("td",{parentName:"tr",align:null},"表单应用上下文信息")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"formState"),(0,r.kt)("td",{parentName:"tr",align:null},"表单状态管理对象")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"detailPage"),(0,r.kt)("td",{parentName:"tr",align:null},"表单详情上下文信息")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'<template>\n  <div>\n    <input v-model="inputValue" @change="onChangeValue" />\n  </div>\n</template>\n\n<script>\nexport default {\n  props: ["value", "onChange"],\n  data: function () {\n    return {\n      inputValue: this.value,\n    };\n  },\n  methods: {\n    onChangeValue: function (e) {\n      this.onChange(e.target.value);\n    },\n  },\n};\n<\/script>\n<style scoped></style>\n')),(0,r.kt)("h3",{id:"jquery-方式开发"},"jQuery 方式开发"),(0,r.kt)("p",null,"jQuery 方式的自定义表单字段组件除接收 react 方式支持的属性外，还接收以下属性："),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"属性名称"),(0,r.kt)("th",{parentName:"tr",align:null},"含义"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"appInfo"),(0,r.kt)("td",{parentName:"tr",align:null},"表单应用上下文信息")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"formState"),(0,r.kt)("td",{parentName:"tr",align:null},"表单状态管理对象")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"detailPage"),(0,r.kt)("td",{parentName:"tr",align:null},"表单详情上下文信息")))),(0,r.kt)("p",null,"使用 ",(0,r.kt)("inlineCode",{parentName:"p"},"jQuery")," 和 ",(0,r.kt)("inlineCode",{parentName:"p"},"Web Component")," 开发字段插件。"),(0,r.kt)("p",null,"在",(0,r.kt)("inlineCode",{parentName:"p"},"react"),"中使用",(0,r.kt)("inlineCode",{parentName:"p"},"Web Component"),"组件时传入的每一个属性，在",(0,r.kt)("inlineCode",{parentName:"p"},"Web Component"),"组件中都需要设置对应属性名称的 set 函数。"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"\nimport $ from 'jquery';\nexport default class InputRenderer extends HTMLElement {\n  public _value: string = '';\n\n  root: ShadowRoot;\n  public _appInfo: any;\n  private _userName?: string;\n  input: any;\n  private _onChange: any;\n\n  constructor() {\n    super();\n    this.root = this.attachShadow({ mode: 'open' });\n    this.root.innerHTML = this.render();\n    this.input = $('#field-input-renderer', this.root);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  connectedCallback() {\n    this.input.on('change', this.handleInputChange);\n  }\n\n  disConnectedCallback() {\n    this.input.off('change', this.handleInputChange);\n  }\n\n  static get observedAttributes() {\n    return ['value'];\n  }\n\n  attributeChangedCallback(attr: string, _oldVal: any, newVal: any) {\n    switch (attr) {\n      case 'value':\n        this.value = newVal;\n        break;\n      default:\n        break;\n    }\n  }\n\n  set onChange(fn: any) {\n    this._onChange = fn;\n  }\n\n  get onChange() {\n    return this._onChange;\n  }\n\n  handleInputChange(e: any) {\n    this.onChange(e.target.value);\n  }\n\n  set appInfo(value: any) {\n    this._appInfo = value;\n    if (value && value.currentUser && value.currentUser.userName) {\n      this.userName = value.currentUser.userName;\n    }\n  }\n\n  set value(val: string) {\n    this._value = val;\n    this.input.val(val);\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set userName(val: string) {\n    this._userName = val;\n    const name = this.root.querySelector('#name');\n    if (name) {\n      name.innerHTML = this.userName;\n    }\n  }\n\n  get userName() {\n    return this._userName ?? '';\n  }\n\n  render() {\n    return `<input id=\"field-input-renderer\" value='${this.value}'/>\n    <div id='name'>${this.userName}</div>`;\n  }\n}\n")),(0,r.kt)("h2",{id:"属性面板开发"},"属性面板开发"),(0,r.kt)("p",null,"属性面板主要用来配置表单字段项各种属性，目前属性面板的开发仅支持",(0,r.kt)("inlineCode",{parentName:"p"},"React"),"方式。可以使用现有组件配置不同的属性名称即可。以",(0,r.kt)("inlineCode",{parentName:"p"},"数字输入框"),"的属性面板为例，示例代码如下："),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import React from "react";\nimport TextInput from "@sinoui/core/TextInput";\nimport InputAdornment from "@sinoui/core/InputAdornment";\nimport Select from "@sinoui/core/Select";\nimport Checkbox from "@sinoui/core/Checkbox";\nimport { FormValueMonitor, RelyRule, Field } from "@sinoui/rx-form-state";\nimport styled from "styled-components";\nimport ConfigItem from "@sinoform/comp-config-item";\nimport LayoutConfigItem from "@sinoform/comp-layout-config-item";\nimport convertInputConfig from "@sinoform/helper-convert-input-config";\nimport { useFormManager } from "@sinoform/form-manager-context";\nimport RelyFieldConfigPanel from "@sinoform/comp-rely-field-config";\nimport type { FormItem } from "@sinoform/types";\nimport ExpressionConfigPanel from "@sinoform/comp-expression-config";\n\nconst InlineNumberInput = styled(TextInput)`\n  display: inline-flex !important;\n  width: 50px;\n  margin: 0px 8px;\n  input {\n    padding-right: 2px;\n  }\n\n  input::-webkit-outer-spin-button,\n  input::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n  input[type="number"] {\n    -moz-appearance: textfield;\n  }\n`;\n\nfunction resetDefaultConfig(draft: FormItem) {\n  if (draft.defaultValue?.type !== "rely") {\n    if (draft.relyConfig) {\n      delete draft.relyConfig;\n    }\n  }\n}\n\nfunction NumberInputConfigPanel({ inSubform }: { inSubform?: boolean }) {\n  const {\n    formDataRef: { current },\n  } = useFormManager();\n  return (\n    <>\n      <ConfigItem label="标题" name="title" required>\n        <TextInput />\n      </ConfigItem>\n      <ConfigItem label="标识" name="fieldName" required>\n        <TextInput />\n      </ConfigItem>\n      {!inSubform && (\n        <ConfigItem label="字段描述" name="helperText">\n          <TextInput multiline />\n        </ConfigItem>\n      )}\n      <RelyRule relyFields={["type"]} relyFn={convertInputConfig} />\n      <ConfigItem label="字段类型" name="type">\n        <Select allowClear={false}>\n          <option value="input">单行文本</option>\n          <option value="textarea">多行文本</option>\n          <option value="numberInput">数字</option>\n        </Select>\n      </ConfigItem>\n      <RelyRule\n        relyFields={["defaultValue.type"]}\n        relyFn={resetDefaultConfig}\n      />\n      <ConfigItem label="默认值">\n        <Field as={Select} name="defaultValue.type">\n          <option value="">无</option>\n          <option value="custom">自定义</option>\n          <option value="expression">公式</option>\n          {current?.applicationId ? (\n            <option value="rely">数据联动</option>\n          ) : null}\n        </Field>\n        <FormValueMonitor path="defaultValue.type">\n          {(type) =>\n            type === "custom" ? (\n              <Field as={TextInput} name="defaultValue.customValue" autoFocus />\n            ) : null\n          }\n        </FormValueMonitor>\n        <FormValueMonitor path="defaultValue.type">\n          {(type) => (type === "expression" ? <ExpressionConfigPanel /> : null)}\n        </FormValueMonitor>\n        <FormValueMonitor path="defaultValue.type">\n          {(type) => (type === "rely" ? <RelyFieldConfigPanel /> : null)}\n        </FormValueMonitor>\n      </ConfigItem>\n      <ConfigItem label="前缀" name="startAdornment">\n        <TextInput />\n      </ConfigItem>\n      <ConfigItem label="后缀" name="endAdornment">\n        <TextInput />\n      </ConfigItem>\n      <ConfigItem label="校验规则">\n        <Field\n          as={Checkbox}\n          name="validateRules.required.enabled"\n          valuePropName="checked"\n        >\n          必填\n        </Field>\n        <Field\n          as={Checkbox}\n          name="validateRules.positiveInteger.enabled"\n          valuePropName="checked"\n        >\n          只显示正整数\n        </Field>\n        <Field\n          as={Checkbox}\n          name="validateRules.decimal.enabled"\n          valuePropName="checked"\n        >\n          <span>小数位</span>\n          <FormValueMonitor path="validateRules.decimal.enabled">\n            {(enabled) =>\n              enabled ? (\n                <Field\n                  as={InlineNumberInput}\n                  name="validateRules.decimal.value"\n                  autoFocus\n                  type="number"\n                  endAdornment={\n                    <InputAdornment position="end">位</InputAdornment>\n                  }\n                />\n              ) : null\n            }\n          </FormValueMonitor>\n        </Field>\n        <Field\n          as={Checkbox}\n          name="validateRules.range.enabled"\n          valuePropName="checked"\n        >\n          <span>限定范围</span>\n          <FormValueMonitor path="validateRules.range.enabled">\n            {(enabled) =>\n              enabled ? (\n                <div style={{ display: "inline-flex" }}>\n                  <Field\n                    as={InlineNumberInput}\n                    name="validateRules.range.min"\n                    autoFocus\n                    type="number"\n                    placeholder="最小值"\n                  />\n                  --\n                  <Field\n                    as={InlineNumberInput}\n                    name="validateRules.range.max"\n                    type="number"\n                    placeholder="最大值"\n                  />\n                </div>\n              ) : null\n            }\n          </FormValueMonitor>\n        </Field>\n      </ConfigItem>\n\n      <LayoutConfigItem inSubform={inSubform} />\n    </>\n  );\n}\n\nexport default React.memo(NumberInputConfigPanel);\n')),(0,r.kt)("p",null,"属性面板中一些通用属性名称如下："),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"属性标识"),(0,r.kt)("th",{parentName:"tr",align:null},"描述"),(0,r.kt)("th",{parentName:"tr",align:null},"说明"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"title"),(0,r.kt)("td",{parentName:"tr",align:null},"字段标题"),(0,r.kt)("td",{parentName:"tr",align:null},"属性面板设置时，此属性为必填")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fieldName"),(0,r.kt)("td",{parentName:"tr",align:null},"字段标识"),(0,r.kt)("td",{parentName:"tr",align:null},"属性面板设置时，必须设置为必填")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"helperText"),(0,r.kt)("td",{parentName:"tr",align:null},"字段描述"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"validateRules.required.enabled"),(0,r.kt)("td",{parentName:"tr",align:null},"校验规则，该字段在表单渲染中是否标题"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"width"),(0,r.kt)("td",{parentName:"tr",align:null},"字段宽度或布局，即该字段占一行的宽度或百分比"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"type"),(0,r.kt)("td",{parentName:"tr",align:null},"字段类型"),(0,r.kt)("td",{parentName:"tr",align:null},"有些字段支持相互转化，比如输入类组件",(0,r.kt)("inlineCode",{parentName:"td"},"单行文本"),"、",(0,r.kt)("inlineCode",{parentName:"td"},"多行文本"),"、",(0,r.kt)("inlineCode",{parentName:"td"},"数字"),"字段可以通过在属性面板选择类型实现转化。字段类型的可选值是支持转化字段的配置 id")))),(0,r.kt)("h3",{id:"监听表单属性值"},"监听表单属性值"),(0,r.kt)("p",null,"在开发属性面板时，我们可能需要监听表单项的某个属性值，从而进行后续设置。比如上述",(0,r.kt)("inlineCode",{parentName:"p"},"数字输入框"),"属性面板中在设置默认值时，如果选择",(0,r.kt)("inlineCode",{parentName:"p"},"自定义"),"，则会出现输入框让我们输入自定义的默认值。此时我们可以使用 ",(0,r.kt)("inlineCode",{parentName:"p"},"@sinoui/rx-form-state"),"库的",(0,r.kt)("inlineCode",{parentName:"p"},"FormValueMonitor"),"组件来监听字段属性值的变化。"),(0,r.kt)("p",null,"代码如下："),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { FormValueMonitor } from "@sinoui/rx-form-state";\n\n<>\n  <ConfigItem label="默认值">\n    <Field as={Select} name="defaultValue.type">\n      <option value="">无</option>\n      <option value="custom">自定义</option>\n      <option value="expression">公式</option>\n      {current?.applicationId ? <option value="rely">数据联动</option> : null}\n    </Field>\n    <FormValueMonitor path="defaultValue.type">\n      {(type) =>\n        type === "custom" ? (\n          <Field as={TextInput} name="defaultValue.customValue" autoFocus />\n        ) : null\n      }\n    </FormValueMonitor>\n  </ConfigItem>\n</>;\n')),(0,r.kt)("p",null,"代码中，通过",(0,r.kt)("inlineCode",{parentName:"p"},"FormValueMonitor"),"组件的",(0,r.kt)("inlineCode",{parentName:"p"},"path"),"属性指定要监听的表单值。"),(0,r.kt)("h3",{id:"值关联"},"值关联"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"值关联"),"也是表单状态管理中比较常见的一种方式。比如",(0,r.kt)("inlineCode",{parentName:"p"},"下拉选择"),"字段是可以通过",(0,r.kt)("inlineCode",{parentName:"p"},"选择类型"),"来切换其选择方式，如果我们在",(0,r.kt)("inlineCode",{parentName:"p"},"多选"),"模式下设置了默认值，那么当我们切换其为",(0,r.kt)("inlineCode",{parentName:"p"},"单选"),"时，需要把默认值清空。这种场景我们就能借助",(0,r.kt)("inlineCode",{parentName:"p"},"值关联"),"的方式实现。"),(0,r.kt)("p",null,"使用",(0,r.kt)("inlineCode",{parentName:"p"},"@sinoui/rx-form-state"),"库的",(0,r.kt)("inlineCode",{parentName:"p"},"RelyRule"),"组件来实现属性值关联计算的功能。"),(0,r.kt)("p",null,"示例代码如下："),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { RelyRule } from "@sinoui/rx-form-state";\n/**\n * 选择类型与选项默认值之间的关联关系\n *\n * @param draft 表单值\n */\nconst selectTypeToOptionsRelyFn = (draft: FormItem) => {\n  //判断选择类型为单选，把所有选项的checked属性置为false\n  if (draft.options && draft.selectType === "single") {\n    draft.options = draft.options.map((item) => ({\n      ...item,\n      checked: false,\n    }));\n  }\n  if (draft.selectType !== "single") {\n    draft.fieldsMapConfig = {};\n  }\n};\n\n<>\n  <ConfigItem label="选择类型" name="selectType">\n    <Select>\n      <option value="single">单选</option>\n      <option value="multiple">多选</option>\n    </Select>\n  </ConfigItem>\n  <RelyRule relyFields={["selectType"]} relyFn={selectTypeToOptionsRelyFn} />\n</>;\n')),(0,r.kt)("h2",{id:"注册表单字段"},"注册表单字段"),(0,r.kt)("p",null,"表单项开发完成之后，我们需要将其注册到 appSetting 中，三种开发方式开发的组件注册方式基本一致，具体如下。"),(0,r.kt)("h3",{id:"react-组件注册方式"},"react 组件注册方式"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import AppSetting from '@sinoform/app-setting';\n\nAppSetting.formConfig.addField({\n  type:'xxx',\n  render:React.lazy(()=>import('./plugins/field-xxx/xxxRenderer')),\n  preview: XxxPreview,\n  configPanel: XxxConfigPanel,\n  ...\n});\n\n")),(0,r.kt)("h3",{id:"vue-组件注册方式"},"vue 组件注册方式"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import AppSetting from "@sinoform/app-setting";\n\nAppSetting.formConfig.addField({\n  type: "vueInput",\n  title: "vue单行文本",\n  group: "normal",\n  icon: EventNote,\n  render: React.lazy(() => import("./plugins/field-xxx/xxxRenderer")),\n  preview: XxxPreview,\n  configPanel: XxxConfigPanel,\n});\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"XxxConfigPanel"),"组件是使用 React 定义的属性设置组件，不是 vue 组件。"),(0,r.kt)("h4",{id:"vue-组件的字段预览和渲染组件"},"vue 组件的字段预览和渲染组件"),(0,r.kt)("p",null,"因为插件开发完成之后，最终是集成到",(0,r.kt)("inlineCode",{parentName:"p"},"React"),"项目中，因此在注册之前，要通过",(0,r.kt)("inlineCode",{parentName:"p"},"@sinoform/plugin-sinoform-helpers"),"中的",(0,r.kt)("inlineCode",{parentName:"p"},"vueComponentWrapper"),"方法将 vue 组件转换为 react 形式的组件。比如上述注册代码中的",(0,r.kt)("inlineCode",{parentName:"p"},"XxxPreview")," 和 ",(0,r.kt)("inlineCode",{parentName:"p"},"xxxRenderer"),"组件。转换代码如下："),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"/xxx/field-xxx目录下"),"index.ts`代码："),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { vueComponentWrapper } from "@sinoform/plugin-sinoform-helpers";\nimport InputRenderer from "./InputRenderer.vue";\nimport InputPreview from "./InputPreview.vue";\n\nconst InputRendererReact = vueComponentWrapper(InputRenderer);\nconst InputPreviewReact = vueComponentWrapper(InputPreview);\n')),(0,r.kt)("h3",{id:"jquery-方式"},"jQuery 方式"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import AppSetting from "@sinoform/app-setting";\n\nAppSetting.formConfig.addField({\n  type: "jsInput",\n  title: "js单行文本",\n  group: "normal",\n  icon: EventNote,\n  render: React.lazy(() => import("./plugins/field-xxx/xxxRenderer")),\n  preview: XxxPreview,\n  configPanel: XxxConfigPanel,\n});\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"XxxConfigPanel"),"组件是使用 React 定义的属性设置组件，不是 Web component 组件。"),(0,r.kt)("h4",{id:"字段预览和渲染组件"},"字段预览和渲染组件"),(0,r.kt)("p",null,"同 vue 开发一样，jquery 开发的组件在注册之前，也要进行转换。具体方式是使用",(0,r.kt)("inlineCode",{parentName:"p"},"@sinoform/plugin-sinoform-helpers"),"中的",(0,r.kt)("inlineCode",{parentName:"p"},"webComponentWrapper"),"方法将 Web component 组件转换为 react 形式的组件。"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"/xxx/field-xxx目录下"),"index.ts 文件在将组件导出之前，对",(0,r.kt)("inlineCode",{parentName:"p"},"XxxPreview")," 和 ",(0,r.kt)("inlineCode",{parentName:"p"},"xxxRenderer"),"组件进行了转换，代码如下："),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-TSX"},"import InputRenderer from './InputRenderer';\nimport InputConfigPanel from './InputConfigPanel';\nimport { webComponentWrapper } from '@sinoform/plugin-sinoform-helpers';\n\ncustomElements.define('field-input-preview', InputPreview);\nconst JsInputPreviewReact = webComponentWrapper('field-input-preview');\n\ncustomElements.define('field-input-renderer', InputRenderer);\nconst JsInputRendererReact = webComponentWrapper('field-input-renderer');\n\nexport { JsInputPreviewReact, InputConfigPanel };\n\nexport default JsInputRendererReact;\n")),(0,r.kt)("h2",{id:"字段配置"},"字段配置"),(0,r.kt)("p",null,"在字段注册时，支持以下所有属性，各个属性含义可参考下表："),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"配置项"),(0,r.kt)("th",{parentName:"tr",align:null},"类型"),(0,r.kt)("th",{parentName:"tr",align:null},"含义"),(0,r.kt)("th",{parentName:"tr",align:null},"是否必须设置"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"type"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"字段类型，必须唯一"),(0,r.kt)("td",{parentName:"tr",align:null},"是")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"title"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"字段名称"),(0,r.kt)("td",{parentName:"tr",align:null},"是")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"group"),(0,r.kt)("td",{parentName:"tr",align:null},"'normal' ","|"," 'senior' ","|"," 'layout'"),(0,r.kt)("td",{parentName:"tr",align:null},"分别表示普通字段、高级字段和布局字段，默认为",(0,r.kt)("inlineCode",{parentName:"td"},"普通字段")),(0,r.kt)("td",{parentName:"tr",align:null},"否")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"icon"),(0,r.kt)("td",{parentName:"tr",align:null},"React.ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},"在表单设计器中字段显示面板中字段图标"),(0,r.kt)("td",{parentName:"tr",align:null},"否")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"preview"),(0,r.kt)("td",{parentName:"tr",align:null},"React.FunctionComponent"),(0,r.kt)("td",{parentName:"tr",align:null},"字段在设计器中的预览组件"),(0,r.kt)("td",{parentName:"tr",align:null},"是")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"subformPreview"),(0,r.kt)("td",{parentName:"tr",align:null},"React.FunctionComponent"),(0,r.kt)("td",{parentName:"tr",align:null},"字段在表单设计器子表单字段中的预览组件"),(0,r.kt)("td",{parentName:"tr",align:null},"否")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"render"),(0,r.kt)("td",{parentName:"tr",align:null},"React.FunctionComponent"),(0,r.kt)("td",{parentName:"tr",align:null},"字段在表单中的渲染组件"),(0,r.kt)("td",{parentName:"tr",align:null},"是")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"subformRender"),(0,r.kt)("td",{parentName:"tr",align:null},"React.FunctionComponent"),(0,r.kt)("td",{parentName:"tr",align:null},"字段在子表单中的渲染组件。如果不指定，则采用 ",(0,r.kt)("inlineCode",{parentName:"td"},"render")," 作为在子表单中的渲染组件。"),(0,r.kt)("td",{parentName:"tr",align:null},"否")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"configPanel"),(0,r.kt)("td",{parentName:"tr",align:null},"React.FunctionComponent"),(0,r.kt)("td",{parentName:"tr",align:null},"字段在表单设计器中的面板配置组件"),(0,r.kt)("td",{parentName:"tr",align:null},"是")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultValueGetter"),(0,r.kt)("td",{parentName:"tr",align:null},"function"),(0,r.kt)("td",{parentName:"tr",align:null},"字段获取默认值的方法"),(0,r.kt)("td",{parentName:"tr",align:null},"否")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultValidate"),(0,r.kt)("td",{parentName:"tr",align:null},"function"),(0,r.kt)("td",{parentName:"tr",align:null},"字段级默认校验规则函数"),(0,r.kt)("td",{parentName:"tr",align:null},"否")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"controlConditions"),(0,r.kt)("td",{parentName:"tr",align:null},"string[]"),(0,r.kt)("td",{parentName:"tr",align:null},"字段支持的控制条件，可选值有",(0,r.kt)("inlineCode",{parentName:"td"},"eq"),"(等于)、",(0,r.kt)("inlineCode",{parentName:"td"},"ne"),"(不等于)、 ",(0,r.kt)("inlineCode",{parentName:"td"},"contains"),"(包含)、 ",(0,r.kt)("inlineCode",{parentName:"td"},"notcontains"),"(不包含)、 ",(0,r.kt)("inlineCode",{parentName:"td"},"isnull"),"(为空)、 ",(0,r.kt)("inlineCode",{parentName:"td"},"isnotnull"),"(不为空)、",(0,r.kt)("inlineCode",{parentName:"td"},"gt"),"(大于)、 ",(0,r.kt)("inlineCode",{parentName:"td"},"gte"),"(大于等于)、",(0,r.kt)("inlineCode",{parentName:"td"},"lt"),"(小于)、",(0,r.kt)("inlineCode",{parentName:"td"},"lte"),"(小于等于)"),(0,r.kt)("td",{parentName:"tr",align:null},"否")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"enableFloating"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"字段是否支持浮动布局"),(0,r.kt)("td",{parentName:"tr",align:null},"否")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultConfig"),(0,r.kt)("td",{parentName:"tr",align:null},"function"),(0,r.kt)("td",{parentName:"tr",align:null},"新增该字段作为表单项时需要产生设置面板默认配置的方法值"),(0,r.kt)("td",{parentName:"tr",align:null},"否")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"validates"),(0,r.kt)("td",{parentName:"tr",align:null},"{ ","[validateName: string]",": function;}"),(0,r.kt)("td",{parentName:"tr",align:null},"字段校验函数"),(0,r.kt)("td",{parentName:"tr",align:null},"否")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"readonlyRender"),(0,r.kt)("td",{parentName:"tr",align:null},"React.ElementType"),(0,r.kt)("td",{parentName:"tr",align:null},"只读渲染器。在需要只读显示的地方使用，如子表单中的字段只读显示、数据查询列表中的显示。如果不指定，则默认直接展示表单项值的值。"),(0,r.kt)("td",{parentName:"tr",align:null},"否")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"textRender"),(0,r.kt)("td",{parentName:"tr",align:null},"function"),(0,r.kt)("td",{parentName:"tr",align:null},"文本渲染。用于打印输出场景。"),(0,r.kt)("td",{parentName:"tr",align:null},"否")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"formatRender"),(0,r.kt)("td",{parentName:"tr",align:null},"function"),(0,r.kt)("td",{parentName:"tr",align:null},"格式化复杂数据类型。用于高级搜索景。"),(0,r.kt)("td",{parentName:"tr",align:null},"否")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disallowInSubform"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"禁止在子表单中渲染。默认为 ",(0,r.kt)("inlineCode",{parentName:"td"},"false"),"，表示可以在子表单中渲染。"),(0,r.kt)("td",{parentName:"tr",align:null},"否")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"transformConfig"),(0,r.kt)("td",{parentName:"tr",align:null},"function"),(0,r.kt)("td",{parentName:"tr",align:null},"将表单项的配置做转化"),(0,r.kt)("td",{parentName:"tr",align:null},"否")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disabledInList"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"是否禁止该字段在数据表格中展示。默认为 ",(0,r.kt)("inlineCode",{parentName:"td"},"false"),"，表示可以在数据表格中展示。"),(0,r.kt)("td",{parentName:"tr",align:null},"否")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disabledInSeniorSearch"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"是否禁止该字段作为查询列表高级查询项。默认为 ",(0,r.kt)("inlineCode",{parentName:"td"},"false"),"，表示可以作为查询列表高级查询项。"),(0,r.kt)("td",{parentName:"tr",align:null},"否")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disabledInControlConditions"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"是否禁止该字段作为路由的控制条件。默认为 ",(0,r.kt)("inlineCode",{parentName:"td"},"false"),"，表示可以作为路由控制条件。"),(0,r.kt)("td",{parentName:"tr",align:null},"否")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"layoutFormField"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"是否为布局字段"),(0,r.kt)("td",{parentName:"tr",align:null},"否")))))}s.isMDXComponent=!0}}]);