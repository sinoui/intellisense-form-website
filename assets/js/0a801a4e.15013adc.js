"use strict";(self.webpackChunkintellisense_form_docs=self.webpackChunkintellisense_form_docs||[]).push([[9945],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return u}});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=i.createContext({}),c=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=c(e.components);return i.createElement(p.Provider,{value:n},e.children)},k={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},s=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),s=c(t),u=r,d=s["".concat(p,".").concat(u)]||s[u]||k[u]||a;return t?i.createElement(d,l(l({ref:n},m),{},{components:t})):i.createElement(d,l({ref:n},m))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=s;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<a;c++)l[c]=t[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}s.displayName="MDXCreateElement"},12280:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return m},default:function(){return s}});var i=t(87462),r=t(63366),a=(t(67294),t(3905)),l=["components"],o={id:"config-external-intro",title:"外部配置"},p=void 0,c={unversionedId:"config-external-intro",id:"config-external-intro",title:"外部配置",description:"智能表单产品是按照微服务十二要素构建的，所以同样遵循以下两个原则：",source:"@site/docs/config-external-intro.md",sourceDirName:".",slug:"/config-external-intro",permalink:"/intellisense-form-website/docs/config-external-intro",tags:[],version:"current",frontMatter:{id:"config-external-intro",title:"外部配置"},sidebar:"someSidebar",previous:{title:"查看产品版本",permalink:"/intellisense-form-website/docs/config-version"},next:{title:"清除测试表单",permalink:"/intellisense-form-website/docs/config-remove-test-data"}},m=[{value:"Spring Boot 外化配置特性介绍",id:"spring-boot-外化配置特性介绍",children:[],level:2},{value:"配置优先级",id:"配置优先级",children:[],level:2},{value:"配置文件优先级",id:"配置文件优先级",children:[],level:2},{value:"配置文件路径",id:"配置文件路径",children:[],level:2},{value:"指定外部配置文件路径",id:"指定外部配置文件路径",children:[],level:2},{value:"特定环境的配置文件",id:"特定环境的配置文件",children:[],level:2},{value:"参考文档",id:"参考文档",children:[],level:2}],k={toc:m};function s(e){var n=e.components,t=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,i.Z)({},k,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"智能表单产品是按照",(0,a.kt)("a",{parentName:"p",href:"https://12factor.net/zh_cn/"},(0,a.kt)("strong",{parentName:"a"},"微服务十二要素")),"构建的，所以同样遵循以下两个原则："),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"一份基准代码（即智能表单产品提供的前端和后端包），多份部署"),(0,a.kt)("li",{parentName:"ul"},"可以在不改变代码的情况下指定配置，如数据库、外部服务等配置")),(0,a.kt)("p",null,"智能表单采用 Spring Boot 开发的，所以同样也继承了 Spring Boot 的强大的配置可定制化能力。如果您已经非常了解 Spring Boot 的配置相关知识，可以跳过此章节。"),(0,a.kt)("h2",{id:"spring-boot-外化配置特性介绍"},"Spring Boot 外化配置特性介绍"),(0,a.kt)("p",null,"Spring Boot 允许您将配置定义在 jar 包之外，以便您可以在不同的环境运行同一份 jar 包。Spring Boot 提供了多种外部配置方式，包括 Java 属性文件（",(0,a.kt)("inlineCode",{parentName:"p"},".properties")," 文件）、YAML 文件（",(0,a.kt)("inlineCode",{parentName:"p"},".yml")," 文件）、环境变量和命令行参数。Spring Boot 定义了严格的配置方式优先级，确保外部配置优先级高于内部配置。"),(0,a.kt)("h2",{id:"配置优先级"},"配置优先级"),(0,a.kt)("p",null,"Spring Boot 应用的配置来源有很多处，所以需要按照优先级顺序，高优先级的覆盖低优先级的配置。Spring Boot 配置的优先级如下（优先级从低到高）："),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"默认属性 （通过 ",(0,a.kt)("inlineCode",{parentName:"li"},"SpringApplication.setDefaultProperties")," 定义的）。"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"@Configuration")," 类上的 ",(0,a.kt)("a",{parentName:"li",href:"https://docs.spring.io/spring-framework/docs/5.3.10/javadoc-api/org/springframework/context/annotation/PropertySource.html"},"@PropertySource")," 注解。"),(0,a.kt)("li",{parentName:"ol"},"来自配置文件的数据（例如 ",(0,a.kt)("inlineCode",{parentName:"li"},"application.yml")," 文件）"),(0,a.kt)("li",{parentName:"ol"},"来自 ",(0,a.kt)("inlineCode",{parentName:"li"},"RandomValuePropertySource")," 中的 ",(0,a.kt)("inlineCode",{parentName:"li"},"random.*")," 属性。"),(0,a.kt)("li",{parentName:"ol"},"操作系统中的环境变量。"),(0,a.kt)("li",{parentName:"ol"},"Java 系统属性（通过 ",(0,a.kt)("inlineCode",{parentName:"li"},"System.getProperties()")," 获取）。"),(0,a.kt)("li",{parentName:"ol"},"来自 ",(0,a.kt)("inlineCode",{parentName:"li"},"java:comp/env")," 的 JNDI 属性。"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"ServletContext")," 初始化参数。"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"ServletConfig")," 初始化参数。"),(0,a.kt)("li",{parentName:"ol"},"来自 ",(0,a.kt)("inlineCode",{parentName:"li"},"SPRING_APPLICATION_JSON")," 的属性。"),(0,a.kt)("li",{parentName:"ol"},"命令行参数。"),(0,a.kt)("li",{parentName:"ol"},"在测试中定义的属性。（只在运行测试时有效）"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"@TestPropertySource")," 定义的属性。（只在运行测试时有效）"),(0,a.kt)("li",{parentName:"ol"},"当启用了 devtools 时，在 ",(0,a.kt)("inlineCode",{parentName:"li"},"$HOME/.config/spring-boot")," 文件夹定义的 Devtools 相关配置。")),(0,a.kt)("p",null,"其中 ",(0,a.kt)("inlineCode",{parentName:"p"},"3"),"、",(0,a.kt)("inlineCode",{parentName:"p"},"5"),"、",(0,a.kt)("inlineCode",{parentName:"p"},"11")," 是最常用，而 ",(0,a.kt)("inlineCode",{parentName:"p"},"3")," 是最复杂的，在下个章节介绍不同配置文件的优先级。"),(0,a.kt)("h2",{id:"配置文件优先级"},"配置文件优先级"),(0,a.kt)("p",null,"配置文件需要遵循以下的优先级（按照从低到高排序）："),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"在 jar 包中的应用配置（如 ",(0,a.kt)("inlineCode",{parentName:"li"},"application.yml"),"）"),(0,a.kt)("li",{parentName:"ol"},"在 jar 包中的特定环境的应用配置（如 ",(0,a.kt)("inlineCode",{parentName:"li"},"application-dev.yml"),"、",(0,a.kt)("inlineCode",{parentName:"li"},"application-prod.yml"),"）"),(0,a.kt)("li",{parentName:"ol"},"在 jar 包之外定义的应用配置（如 ",(0,a.kt)("inlineCode",{parentName:"li"},"config/application.yml"),"）"),(0,a.kt)("li",{parentName:"ol"},"在 jar 包之外定义的特定环境的应用配置（如 ",(0,a.kt)("inlineCode",{parentName:"li"},"config/application-dev.yml"),"、",(0,a.kt)("inlineCode",{parentName:"li"},"config/application-prod.yml"),"）")),(0,a.kt)("h2",{id:"配置文件路径"},"配置文件路径"),(0,a.kt)("p",null,"Spring Boot 会自动从以下路径查找 ",(0,a.kt)("inlineCode",{parentName:"p"},"application.yaml")," 和 ",(0,a.kt)("inlineCode",{parentName:"p"},"application.properties")," 文件（优先级从低到高排序）："),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"从类路径中获取",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"根类路径"),(0,a.kt)("li",{parentName:"ol"},"在类路径的 ",(0,a.kt)("inlineCode",{parentName:"li"},"/config")," 包下"))),(0,a.kt)("li",{parentName:"ol"},"从当前运行目录中获取（指运行 jar 包的目录）",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"当前运行目录"),(0,a.kt)("li",{parentName:"ol"},"当前运行目录的 ",(0,a.kt)("inlineCode",{parentName:"li"},"config")," 子目录"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"config")," 子目录中的直接子目录")))),(0,a.kt)("h2",{id:"指定外部配置文件路径"},"指定外部配置文件路径"),(0,a.kt)("p",null,"可以在执行 jar 包时，通过命令行参数 ",(0,a.kt)("inlineCode",{parentName:"p"},"spring.config.location")," 指定查找配置文件的路径，如下所示："),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ java -Dspring.profile.active=dev \\\n        -Dspring.config.location=classpath:/ \\\n        -Dspring.config.location=file:/apps/sino-intellisense-form/backend/config/ \\\n        -jar sino-intellisense-form-1.12.0.jar\n")),(0,a.kt)("p",null,"上面的示例通过 ",(0,a.kt)("inlineCode",{parentName:"p"},"spring.config.location")," 指定了两个查找配置文件的路径，即："),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"根类路径"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"/apps/sino-intellisense-form/backend/config/")," 目录")),(0,a.kt)("h2",{id:"特定环境的配置文件"},"特定环境的配置文件"),(0,a.kt)("p",null,"Spring Boot 允许我们为不同的环境定义不同的配置文件。最典型的场景就是为开发、测试、生产单独指定配置文件。例如我们分别为三个环境定义了配置文件："),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"applicaiton.yaml")," （默认配置文件）"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"application-dev.yaml")," （开发环境配置文件）"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"application-test.yaml")," （测试环境配置文件）"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"application-prod.yaml")," （生产环境配置文件）")),(0,a.kt)("p",null,"我们在运行 jar 包时，可以通过 ",(0,a.kt)("inlineCode",{parentName:"p"},"spring.profile.active")," 参数来指定采用哪种环境的配置文件。例如在生产环境中启动时，我们通过下面的命令行启动："),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:"{2}","{2}":!0},"$ java\n  -Dspring.profile.active=prod \\\n  -jar sino-intellisense-form-1.12.0.jar\n")),(0,a.kt)("p",null,"这样，在生产环境中，Spring Boot 就会去查找 ",(0,a.kt)("inlineCode",{parentName:"p"},"application.yaml")," 和 ",(0,a.kt)("inlineCode",{parentName:"p"},"application-prod.yaml")," 文件，而不会去找 ",(0,a.kt)("inlineCode",{parentName:"p"},"application-dev.yaml")," 和 ",(0,a.kt)("inlineCode",{parentName:"p"},"application-test.yaml")," 文件。"),(0,a.kt)("h2",{id:"参考文档"},"参考文档"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.spring.io/spring-boot/docs/2.4.11/reference/html/spring-boot-features.html#boot-features-external-config"},"Spring Boot externalized configuration"))))}s.isMDXComponent=!0}}]);