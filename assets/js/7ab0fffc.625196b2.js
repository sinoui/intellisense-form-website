"use strict";(self.webpackChunkintellisense_form_docs=self.webpackChunkintellisense_form_docs||[]).push([[7671],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return u}});var r=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=r.createContext({}),d=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},m=function(e){var n=d(e.components);return r.createElement(p.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=d(t),u=l,k=c["".concat(p,".").concat(u)]||c[u]||s[u]||o;return t?r.createElement(k,a(a({ref:n},m),{},{components:t})):r.createElement(k,a({ref:n},m))}));function u(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,a=new Array(o);a[0]=c;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:l,a[1]=i;for(var d=2;d<o;d++)a[d]=t[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},51676:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return d},toc:function(){return m},default:function(){return c}});var r=t(87462),l=t(63366),o=(t(67294),t(3905)),a=["components"],i={id:"deployment-independent-prod",title:"部署智能表单（生产环境）"},p=void 0,d={unversionedId:"deployment-independent-prod",id:"deployment-independent-prod",title:"部署智能表单（生产环境）",description:"部署必备环境",source:"@site/docs/deployment-independent-pro.md",sourceDirName:".",slug:"/deployment-independent-prod",permalink:"/intellisense-form-website/docs/deployment-independent-prod",tags:[],version:"current",frontMatter:{id:"deployment-independent-prod",title:"部署智能表单（生产环境）"}},m=[{value:"部署必备环境",id:"部署必备环境",children:[],level:2},{value:"mongodb 安装",id:"mongodb-安装",children:[{value:"下载安装包",id:"下载安装包",children:[],level:3},{value:"解压安装包",id:"解压安装包",children:[],level:3},{value:"将 mongodb 部署到特定目录",id:"将-mongodb-部署到特定目录",children:[],level:3},{value:"创建必要的目录",id:"创建必要的目录",children:[],level:3},{value:"编写配置文件",id:"编写配置文件",children:[],level:3},{value:"启动 mongodb",id:"启动-mongodb",children:[],level:3}],level:2},{value:"nginx 使用",id:"nginx-使用",children:[{value:"nginx 安装",id:"nginx-安装",children:[],level:3},{value:"意义",id:"意义",children:[],level:3},{value:"思路步骤",id:"思路步骤",children:[],level:3}],level:2},{value:"管理端前端部署",id:"管理端前端部署",children:[],level:2},{value:"pc 前端项目部署",id:"pc-前端项目部署",children:[],level:2},{value:"移动端项目部署",id:"移动端项目部署",children:[],level:2},{value:"后端项目部署",id:"后端项目部署",children:[{value:"上传 jar 文件到服务器",id:"上传-jar-文件到服务器",children:[],level:3},{value:"jar 包外的配置文件",id:"jar-包外的配置文件",children:[],level:3},{value:"项目中的环境说明",id:"项目中的环境说明",children:[],level:3},{value:"springboot 参数说明",id:"springboot-参数说明",children:[],level:3},{value:"启动智能表单服务",id:"启动智能表单服务",children:[],level:3}],level:2},{value:"常见问题",id:"常见问题",children:[{value:"业务数据点击“发送”走工作流的时候，出现超时问题",id:"业务数据点击发送走工作流的时候出现超时问题",children:[],level:3},{value:"工作流标题乱码",id:"工作流标题乱码",children:[],level:3}],level:2}],s={toc:m};function c(e){var n=e.components,t=(0,l.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"部署必备环境"},"部署必备环境"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"核心数据库：mongodb"),(0,o.kt)("li",{parentName:"ol"},"网关：nginx"),(0,o.kt)("li",{parentName:"ol"},"需要提供 统一授权服务，工作流设计服务，工作流引擎服务")),(0,o.kt)("h2",{id:"mongodb-安装"},"mongodb 安装"),(0,o.kt)("h3",{id:"下载安装包"},"下载安装包"),(0,o.kt)("p",null,"wget ",(0,o.kt)("a",{parentName:"p",href:"http://downloads.mongodb.org/linux/mongodb-linux-x86_64-rhel70-latest.tgz"},"http://downloads.mongodb.org/linux/mongodb-linux-x86_64-rhel70-latest.tgz")),(0,o.kt)("h3",{id:"解压安装包"},"解压安装包"),(0,o.kt)("p",null,"tar -zxf mongodb-linux-x86_64-rhel70-latest.tgz"),(0,o.kt)("h3",{id:"将-mongodb-部署到特定目录"},"将 mongodb 部署到特定目录"),(0,o.kt)("p",null,"mv mongodb-linux-x86_64-rhel70-4.3.2-48-gd455f65/ /usr/local/mongodb"),(0,o.kt)("h3",{id:"创建必要的目录"},"创建必要的目录"),(0,o.kt)("p",null,"cd /usr/local/mongodb/\nmkdir logs\nmkdir -p data/"),(0,o.kt)("h3",{id:"编写配置文件"},"编写配置文件"),(0,o.kt)("p",null,"进入 /usr/local/mongodb/ 目录, 在里面创建一个名为 mongodb.conf 的文件"),(0,o.kt)("blockquote",null,(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"#数据文件存放目录\ndbpath = data\n#日志文件存放目录\nlogpath = logs/mongodb.log\n#端口\nport = 27017\n#以守护进程的方式启用，即后台运行;默认false\nfork = true\n# 关闭web管理访问，默认关闭27018端口访问，这个是在prot端口上加1000\n#httpinterface = true\n#是否开启权限验证\nauth = false\n#绑定ip，让其能够通过外网访问， 0.0.0.0代表所有\nbind_ip = 0.0.0.0\n"))),(0,o.kt)("h3",{id:"启动-mongodb"},"启动 mongodb"),(0,o.kt)("p",null,"bin/mongod -f mongodb.conf"),(0,o.kt)("h2",{id:"nginx-使用"},"nginx 使用"),(0,o.kt)("h3",{id:"nginx-安装"},"nginx 安装"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"下载 nginx 稳定版，官网地址：",(0,o.kt)("a",{parentName:"li",href:"http://nginx.org/"},"http://nginx.org/")),(0,o.kt)("li",{parentName:"ol"},"将下载下来的压缩包解压出来 tar -zxvf nginx-version.tar.gz"),(0,o.kt)("li",{parentName:"ol"},"解压后会生成一个 nginx-version 目录，切换到该目录下，运行./configure 进行初始化配置"),(0,o.kt)("li",{parentName:"ol"},"运行 make install 进行编译。默认安装到/usr/local/nginx 目录下"),(0,o.kt)("li",{parentName:"ol"},"如果安装中出现其他问题，可以自行百度")),(0,o.kt)("h3",{id:"意义"},"意义"),(0,o.kt)("p",null,"目前，智能表单没有集成单点登录功能，但是需要 SSOID（保存在浏览器 cookie 中）进行鉴权，所以一般情况下是在业务系统中加入一个入口按钮或者链接跳转到智能表单首页。由于需要共享 SSOID，两个系统的域名必须是同一个。所以需要借助 nginx 根据不同 url 前缀来做反向代理。"),(0,o.kt)("h3",{id:"思路步骤"},"思路步骤"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"业务系统在 tomcat 启动的时候，需要绑定 tomcat 的 ip 地址为本地 ip：127.0.0.1。"),(0,o.kt)("p",{parentName:"li"},"具体配置位置在 tomcat /conf 目录下 server.xml 文件中。在标签元素",(0,o.kt)("strong",{parentName:"p"},"Connector"),"标签 添加属性"),(0,o.kt)("p",{parentName:"li"},"address=“127.0.0.1”。 如果业务系统是采用 springboot 框架，在配置文件中，server.address=127.0.0.1")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"nginx 关键配置点："),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"server"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-nginx"},"server {\n  listen 192.168.80.142:8084 default_server;\n  server_name _;\n  root /var/www/default;\n}\n")),(0,o.kt)("p",{parentName:"li"},"192.168.80.142 是服务器外网或者局域网 IP 地址 8084 是监听端口 和业务系统的端口号，"),(0,o.kt)("p",{parentName:"li"},"保持一致。"),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"关键点")," ",(0,o.kt)("em",{parentName:"p"},"nginx 的监听必须是服务器 ip 地址+端口，否则和业务系统会有冲突")),(0,o.kt)("p",{parentName:"li"},"root 这个是前端项目放置的物理路径")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"server 下 配置 location 路由代理规则"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"业务系统"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-nginx"},"location /demo/ {\n  proxy_set_header Host $host;\n  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n  proxy_set_header X-Forwarded-Host $http_host;\n  proxy_set_header X-Forwarded-Port $server_port;\n  proxy_set_header X-Forwarded-Proto $scheme;\n  proxy_set_header X-Real-IP $remote_addr;\n  proxy_pass http://127.0.0.1:8084;\n}\n")),(0,o.kt)("p",{parentName:"li"},"8084 是业务系统的端口 /demo 是业务系统的前缀路由")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"智能表单 - 后台接口服务"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-nginx"},"location /apis/intellisense-form/ {\n  proxy_set_header Host $host;\n  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n  proxy_set_header X-Forwarded-Host $http_host;\n  proxy_set_header X-Forwarded-Port $server_port;\n  proxy_set_header X-Forwarded-Proto $scheme;\n  proxy_set_header X-Real-IP $remote_addr;\n  proxy_pass http://127.0.0.1:8085;\n}\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"智能表单 - 业务前端服务"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-nginx"},"## 配置主题入口文件不做缓存\nlocation ~ .\\*/remote-entry.js\\$ {\nadd_header Cache-Control no-store;\n}\n\nlocation /intellisense-form/ {\n  index index.html index.htm;\n  try_files $uri $uri/ /intellisense-form/index.html;\n  add_header Cache-Control no-store;\n}\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"智能表单 - 移动端服务"))))),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-nginx"},"      location /intellisense-form-mobile/ {\n            index index.html index.htm;\n            try_files $uri $uri/ /intellisense-form-mobile/index.html;\n            add_header Cache-Control no-store;\n            }\n")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"智能表单 - 管理端服务"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"```nginx\nlocation /intellisense-form-manager/ {\n  index index.html index.htm;\n  try_files $uri $uri/ /intellisense-form-manager/index.html;\n  add_header Cache-Control no-store;\n")),(0,o.kt)("p",{parentName:"li"},"}"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},""))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"智能表单 - 静态资源缓存配置"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-nginx"}," location ~ /intellisense-form.*\\.(gif|jpg|jpeg|png|bmp|swf|js|css|md|pdf|ttf|ttc|eot|woff2|woff|svg)$ {\n         expires 365d;\n }\n\n")))))),(0,o.kt)("h2",{id:"管理端前端部署"},"管理端前端部署"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"找到 intellisense-form-manager 文件夹"),(0,o.kt)("li",{parentName:"ol"},"将上述前端文件夹部署到 nginx 配置文件中 server 下 root 指定的目录中")),(0,o.kt)("h2",{id:"pc-前端项目部署"},"pc 前端项目部署"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"找到 intellisense-form 文件夹"),(0,o.kt)("li",{parentName:"ol"},"将上述前端文件夹部署到 nginx 配置文件中 server 下 root 指定的目录中")),(0,o.kt)("h2",{id:"移动端项目部署"},"移动端项目部署"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"找到 intellisense-mobile 文件夹"),(0,o.kt)("li",{parentName:"ol"},"将上述前端文件夹部署到 nginx 配置文件中 server 下 root 指定的目录中")),(0,o.kt)("h2",{id:"后端项目部署"},"后端项目部署"),(0,o.kt)("h3",{id:"上传-jar-文件到服务器"},"上传 jar 文件到服务器"),(0,o.kt)("p",null,"智能表单部署文件 intellisenseform-bff-｛version｝.jar 复制到服务器上"),(0,o.kt)("h3",{id:"jar-包外的配置文件"},"jar 包外的配置文件"),(0,o.kt)("p",null,"为了更方便的修改配置文件，可以在与 jar 文件同级的目录下。自己可以手动的去新建一个 config 文件夹，可以将项目里面的 yml。拷贝一份，放到 config 文件夹下。然后在根据实际情况修改配置文件。原理利用了 springboot 加载配置的优先级不同，外部配置文件属性会覆盖内部配置文件属性。"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"注意")," !!! config 的目录必须和执行 java -jar 是同一级目录。否则不起作用。本例中，执行 java -jar intellisenseform-bff-｛version｝.jar 有效。 如果执行 java -jar /usr/local/jar/intellisenseform-bff-｛version｝.jar 那就不起作用。除非将 config 放在根目录下"),(0,o.kt)("h3",{id:"项目中的环境说明"},"项目中的环境说明"),(0,o.kt)("p",null,"开发环境通常为 dev 环境，采用 application-dev.yml。测试环境使用 test 环境，application-test.yml。 docker 容器化部署使用 application-docker.yml。"),(0,o.kt)("h3",{id:"springboot-参数说明"},"springboot 参数说明"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"server.port = 8085 #应用启动端口"),(0,o.kt)("li",{parentName:"ol"},"server.context-path: / #应用路径"),(0,o.kt)("li",{parentName:"ol"},"spring.data.mongodb.url mongodb://192.168.80.142/form"),(0,o.kt)("li",{parentName:"ol"},"sso.ssoService: #单点登录服务器"),(0,o.kt)("li",{parentName:"ol"},"url.workflowDesignUrl = #工作流设计器路径"),(0,o.kt)("li",{parentName:"ol"},"url.workflowUrl = #工作流引擎路径"),(0,o.kt)("li",{parentName:"ol"},"url.uiasUrl = # 统一授权管理系统路径"),(0,o.kt)("li",{parentName:"ol"},"configs.systemId = #业务系统的系统 id"),(0,o.kt)("li",{parentName:"ol"},"database.type = {mysql|oracle|mongo} 系统中业务数据存储的数据库类型,配置为空 默认采用 mongodb"),(0,o.kt)("li",{parentName:"ol"},"spring.datasource 业务数据存储的数据库配置信息")),(0,o.kt)("h3",{id:"启动智能表单服务"},"启动智能表单服务"),(0,o.kt)("p",null,"进入到 jar 文件所在的目录，执行一下启动命令。"),(0,o.kt)("p",null,"nohup java -Dspring.profiles.active=test -jar intellisenseform-bff-{替换为对应的版本}.jar > intellisenseform-bff.log &"),(0,o.kt)("h2",{id:"常见问题"},"常见问题"),(0,o.kt)("h3",{id:"业务数据点击发送走工作流的时候出现超时问题"},"业务数据点击“发送”走工作流的时候，出现超时问题"),(0,o.kt)("p",null,"解决方式：需要在 工作流设计器平台---》系统配置 ，找到待办授权服务，清空服务名称，把后面的下拉选项，选择为本地实现类。！！！一定要重启工作流设计器服务"),(0,o.kt)("h3",{id:"工作流标题乱码"},"工作流标题乱码"),(0,o.kt)("p",null,"原因：tomcat7 之前默认都是 iso-8859-1。"),(0,o.kt)("p",null,"解决方式：设置 workflow 项目的 tomcat 字符集为 utf-8.修改 tomcat 下的 conf/server.xml 文件"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<Connector port="8080"  protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8443" **URIEncoding="UTF-8"** useBodyEncodingForURI="true""/>\n\n\n')))}c.isMDXComponent=!0}}]);