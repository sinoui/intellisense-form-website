"use strict";(self.webpackChunkintellisense_form_docs=self.webpackChunkintellisense_form_docs||[]).push([[7798],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),m=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=m(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=m(t),f=i,g=d["".concat(s,".").concat(f)]||d[f]||u[f]||r;return t?a.createElement(g,l(l({ref:n},p),{},{components:t})):a.createElement(g,l({ref:n},p))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var m=2;m<r;m++)l[m]=t[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},34244:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return m},toc:function(){return p},default:function(){return d}});var a=t(87462),i=t(63366),r=(t(67294),t(3905)),l=["components"],o={id:"plugin-detail-page-extend",title:"自定义详情页业务逻辑扩展"},s=void 0,m={unversionedId:"plugin-detail-page-extend",id:"plugin-detail-page-extend",title:"自定义详情页业务逻辑扩展",description:"业务逻辑扩展主要包括三个方面的扩展：",source:"@site/docs/plugin-detail-page-extend.md",sourceDirName:".",slug:"/plugin-detail-page-extend",permalink:"/intellisense-form-website/docs/plugin-detail-page-extend",tags:[],version:"current",frontMatter:{id:"plugin-detail-page-extend",title:"自定义详情页业务逻辑扩展"},sidebar:"someSidebar",previous:{title:"新增流程按钮",permalink:"/intellisense-form-website/docs/plugin-button"},next:{title:"自定义全局样式",permalink:"/intellisense-form-website/docs/plugin-css"}},p=[{value:"添加自定义业务逻辑扩展方法",id:"添加自定义业务逻辑扩展方法",children:[],level:2},{value:"注册方式",id:"注册方式",children:[],level:2},{value:"监听表单值变化",id:"监听表单值变化",children:[],level:2},{value:"按钮点击事件的前置回调函数",id:"按钮点击事件的前置回调函数",children:[],level:2},{value:"自定义权限判定逻辑",id:"自定义权限判定逻辑",children:[{value:"自定义权限判定方法",id:"自定义权限判定方法",children:[],level:3},{value:"注册权限判定方法",id:"注册权限判定方法",children:[],level:3},{value:"权限判定方法说明",id:"权限判定方法说明",children:[],level:3},{value:"权限判定示例",id:"权限判定示例",children:[],level:3}],level:2}],u={toc:p};function d(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"业务逻辑扩展主要包括三个方面的扩展："),(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"表单值变化监听、表单字段项值变化监听"),(0,r.kt)("li",{parentName:"ul"},"按钮点击事件的前置回调函数"),(0,r.kt)("li",{parentName:"ul"},"自定义按钮或表单项权限"))),(0,r.kt)("h2",{id:"添加自定义业务逻辑扩展方法"},"添加自定义业务逻辑扩展方法"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="detailPageExtend.ts"',title:'"detailPageExtend.ts"'},'import type { DetailPageExtendsConfig } from "@sinoform/types";\n\nexport default function formExtends(detailPageConfig: DetailPageExtendsConfig) {\n  // 监听表单值变化\n  detailPageConfig.onValueChange((prevValue, nextValue) => {\n    console.log(\n      `表单值发生变化：${JSON.stringify(prevValue)}=======>${JSON.stringify(\n        nextValue\n      )}`\n    );\n  });\n\n  // 监听field_1表单项值的变化\n  detailPageConfig.onFieldValueChange("field_1", (prevValue, nextValue) => {\n    console.log(`field_1的值发生变化：${prevValue}=======>${nextValue}`);\n  });\n\n  // 监听按钮点击事件，添加前置处理，返回true或false决定是否继续执行点击事件\n  detailPageConfig.onButtonPrevClick(\n    "save",\n    (event: DetailPageContextType) => {\n      const { formState } = event;\n      if (formState.values["bianhao"] === "002") {\n        formState.setFieldError("bianhao", "编号不能重复");\n        formState.setFieldTouched("bianhao", true);\n\n        return false;\n      }\n\n      return true;\n    },\n    true\n  );\n}\n')),(0,r.kt)("p",null,"上述代码中，",(0,r.kt)("inlineCode",{parentName:"p"},"detailPageExtend"),"方法接收一个",(0,r.kt)("inlineCode",{parentName:"p"},"detailPageConfig"),"参数，其中",(0,r.kt)("inlineCode",{parentName:"p"},"detailPageConfig"),"中包含以下方法："),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onValueChange")," —— 监听表单值变化"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onFieldValueChange")," —— 监听指定表单项的值变化"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onButtonPrevClick")," —— 监听指定按钮的点击事件"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"customPermission")," —— 注册自定义权限控制的方法"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getFormValue")," —— 获取存储的表单值"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getFormState")," —— 获取当前表单状态")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"detailPageConfig")," 完整的数据结构如下："),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="DetailPageExtendsConfig.ts"',title:'"DetailPageExtendsConfig.ts"'},'import type { FormState } from "@sinoui/rx-form-state";\nimport type { FormData } from "../app/FormData";\nimport type { CustomPermissionFn } from "../app/CustomPermissionFn";\n\nexport interface ValueChangeCallback<ValueType = any, FormType = any> {\n  /**\n   * @param prevValue 变化之前的值\n   * @param nextValue 变化之后的值\n   * @param formState 表单状态管理对象\n   */\n  (\n    prevValue: ValueType,\n    nextValue: ValueType,\n    formState: FormState<FormType>\n  ): void;\n}\n\nexport interface DetailPageExtendsConfig {\n  /**\n   * 监听表单值变化\n   *\n   * @param fn 值变化的回调函数\n   * @param filterFn 自定义的rxjs过滤方法\n   */\n  onValueChange<T = any>(\n    fn: ValueChangeCallback<T, T>,\n    filterFn?: () => any\n  ): () => void;\n  /**\n   * 监听表单项值的变化\n   *\n   * @param fieldName 表单字段标识\n   * @param fn 值变化的回调函数\n   */\n  onFieldValueChange<ValueType = any, FormType = any>(\n    fieldName: string,\n    fn: ValueChangeCallback<ValueType, FormType>\n  ): () => void;\n  /**\n   * 监听指定按钮的点击事件\n   * @param buttonId 按钮标识\n   * @param fn 按钮点击事件的前置回调函数\n   * @param common 通用拓展插件点击事件\n   */\n  onButtonPrevClick(\n    buttonId: string,\n    fn: (event: any) => boolean,\n    common?: boolean\n  ): () => void;\n  /**\n   * 获取存储的表单数据\n   */\n  getFormValue: () => FormData;\n  /**\n   * 获取表单实时状态\n   */\n  getFormState<T = any>(): FormState<T>;\n  /**\n   * 自定义权限计算方式\n   * @param fn 权限判定方法\n   */\n  customPermission(fn: CustomPermissionFn): void;\n}\n')),(0,r.kt)("h2",{id:"注册方式"},"注册方式"),(0,r.kt)("p",null,"通过 appSetting 的方式注册此扩展，具体如下："),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsts",metastring:'title="index.ts"',title:'"index.ts"'},'import appSetting from "@sinoform/app-setting";\n\nappsetting.detailPageExtendConfig.addDetailPageExtend(\n  "表单id", // 这里的表单id指的是表单设计的id\n  () => import("./detailPageExtend.ts"),\n  false\n);\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"appsetting.detailPageExtendConfig.addDetailPageExtend()"),"方法接收 3 个参数："),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"formDesignId")," —— 表单设计器的 id"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fn")," —— 引入扩展文件的方法"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"common")," —— 是否对全局表单起作用。值为",(0,r.kt)("inlineCode",{parentName:"li"},"true | false"),"， 默认为",(0,r.kt)("inlineCode",{parentName:"li"},"false"),"，表示此扩展 逻辑只对绑定的表单起作用。若设为",(0,r.kt)("inlineCode",{parentName:"li"},"true"),"，则无论",(0,r.kt)("inlineCode",{parentName:"li"},"formDesignId"),"为何值，此扩展逻辑都对所有表单起作用。")),(0,r.kt)("h2",{id:"监听表单值变化"},"监听表单值变化"),(0,r.kt)("p",null,"在业务逻辑扩展方法中我们可以监听表单值的变化，从而做一系列的操作，具体如下："),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="detailPageExtend.ts"',title:'"detailPageExtend.ts"'},'import type { DetailPageExtendsConfig } from "@sinoform/types";\n\nexport default function formExtends(detailPageConfig: DetailPageExtendsConfig) {\n  // 监听表单值变化\n  detailPageConfig.onValueChange((prevValue, nextValue, formState) => {\n    console.log(\n      `表单值发生变化：${JSON.stringify(prevValue)}=======>${JSON.stringify(\n        nextValue\n      )}`\n    );\n  });\n\n  // 监听field_1表单项值的变化\n  detailPageConfig.onFieldValueChange("field_1", (prevValue, nextValue) => {\n    console.log(`field_1的值发生变化：${prevValue}=======>${nextValue}`);\n  });\n}\n')),(0,r.kt)("h2",{id:"按钮点击事件的前置回调函数"},"按钮点击事件的前置回调函数"),(0,r.kt)("p",null,"我们可以在扩展逻辑中添加指定按钮点击事件的前置回调函数。比如，一个带编号的表单，编号是不允许重复的，那么我们就可以在扩展逻辑中添加一个",(0,r.kt)("inlineCode",{parentName:"p"},"保存"),"按钮的前置回调函数，在此方法中判断编号值是否重复，从而决定是否进行后续操作，具体实现可参考："),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="detailPageExtend.ts"',title:'"detailPageExtend.ts"'},'import type { DetailPageExtendsConfig } from "@sinoform/types";\n\nexport default function formExtends(detailPageConfig: DetailPageExtendsConfig) {\n  // 监听按钮点击事件，添加前置处理，返回true或false决定是否继续执行点击事件\n  detailPageConfig.onButtonPrevClick(\n    "save",\n    (event: DetailPageContextType) => {\n      const { formState } = event;\n      // 判断编号是否等于已有编号\n      if (formState.values["bianhao"] === "002") {\n        // 设置校验错误\n        formState.setFieldError("bianhao", "编号不能重复");\n        formState.setFieldTouched("bianhao", true);\n\n        // 返回false,表示不执行保存操作\n        return false;\n      }\n\n      //返回true,表示执行保存操作\n      return true;\n    },\n    true\n  );\n}\n')),(0,r.kt)("p",null,"上述代码的在应用中的实际意义为：在此扩展逻辑绑定的表单点击",(0,r.kt)("inlineCode",{parentName:"p"},"保存"),"按钮时，会首先校验编号字段的值是否与已有数据重复，如果是，则设置校验失败的提示，并且不再执行保存操作；如果不重复，则直接保存。"),(0,r.kt)("h2",{id:"自定义权限判定逻辑"},"自定义权限判定逻辑"),(0,r.kt)("p",null,"智能表单权限一共有三部分："),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"流程节点配置的表单项权限和节点操作权限"),(0,r.kt)("li",{parentName:"ol"},"表单设计时，通过选项关联设置的表单项权限"),(0,r.kt)("li",{parentName:"ol"},"通过扩展业务逻辑的方式注册的权限")),(0,r.kt)("p",null,"这里我们主要描述如何通过扩展业务逻辑的方式自定义权限模型。"),(0,r.kt)("h3",{id:"自定义权限判定方法"},"自定义权限判定方法"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="getCustomPermission.ts"',title:'"getCustomPermission.ts"'},'import type {\n  FormData,\n  FormValues,\n  UserInfo,\n  PermissionItem,\n} from "@sinoform/types";\n\nexport default function getCustomPermission(\n  formData: FormData | undefined,\n  formValues: FormValues,\n  currentUser: UserInfo\n): PermissionItem[] {\n  const permissionItems: PermissionItem[] = [];\n  const { passNodes = [], flowNode } = formData ?? {};\n\n  if (\n    flowNode?.name === "处长审批" &&\n    passNodes?.every(\n      (node) => node.id !== "98dfd13f-f700-4751-8983-0323a451a4c1"\n    )\n  ) {\n    permissionItems.push({\n      name: "end",\n      hidden: true,\n    });\n  }\n\n  return permissionItems;\n}\n')),(0,r.kt)("p",null,"上述代码示例的意义是为了控制",(0,r.kt)("inlineCode",{parentName:"p"},"办结"),"按钮的权限，如果当前节点是处长审批节点，且此流程还未经过指定节点，则办结按钮不显示。"),(0,r.kt)("h3",{id:"注册权限判定方法"},"注册权限判定方法"),(0,r.kt)("p",null,"当我们自定义完权限判定之后，可通过下面的方式将其注册进业务扩展逻辑中。"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="detailPageExtend.ts"',title:'"detailPageExtend.ts"'},'import type { DetailPageExtendsConfig } from "@sinoform/types";\nimport getCustomPermission from "./getCustomPermission";\n\nexport default function formExtends(detailPageConfig: DetailPageExtendsConfig) {\n  // 注册权限判定方法\n  detailPageConfig.customPermission(getCustomPermission);\n}\n')),(0,r.kt)("h3",{id:"权限判定方法说明"},"权限判定方法说明"),(0,r.kt)("p",null,"权限判定方法接收三个参数："),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"formData")," —— 表单数据，包括表单配置数据、流程配置数据、流经节点等"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"formValues")," —— 表单项的值"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"currentUser")," —— 当前登录人信息")),(0,r.kt)("p",null,"我们可以根据以上三个参数，添加各种逻辑判断，从而控制表单项或者按钮权限。"),(0,r.kt)("h3",{id:"权限判定示例"},"权限判定示例"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"文秘节点配置",(0,r.kt)("inlineCode",{parentName:"li"},"办结"),"按钮，但必须在经过",(0,r.kt)("inlineCode",{parentName:"li"},"办公室主任审批"),"后才能显示此按钮")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="getCustomPermission.ts"',title:'"getCustomPermission.ts"'},'import type {\n  FormData,\n  FormValues,\n  UserInfo,\n  PermissionItem,\n} from "@sinoform/types";\n\nexport default function getCustomPermission(\n  formData: FormData | undefined,\n  formValues: FormValues,\n  currentUser: UserInfo\n): PermissionItem[] {\n  const permissionItems: PermissionItem[] = [];\n  const { passNodes = [], flowNode } = formData ?? {};\n\n  // 判断当前节点是否是`文秘`节点且流程已经流经`办公室主任审批`节点，这里用到了节点id,由于每个节点的id都不一致，因此如果使用节点id的话，此权限判定只能对绑定的表单起作用。如果此逻辑为共用，建议使用节点名称匹配，即`node.name !== \'办公室主任审批\'`\n  if (\n    flowNode?.name === "文秘" &&\n    passNodes?.every(\n      (node) => node.id !== "98dfd13f-f700-4751-8983-0323a451a4c1"\n    )\n  ) {\n    permissionItems.push({\n      name: "end",\n      hidden: true,\n    });\n  }\n\n  return permissionItems;\n}\n')),(0,r.kt)("p",null,"2.流程 ",(0,r.kt)("inlineCode",{parentName:"p"},"办结")," 之后，",(0,r.kt)("inlineCode",{parentName:"p"},"张三")," 对表单中的",(0,r.kt)("inlineCode",{parentName:"p"},"用户反馈"),"有可见且可编辑权限"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/plugins/detail-page-extends/getCustomPermission.ts"',title:'"src/plugins/detail-page-extends/getCustomPermission.ts"'},'import type {\n  FormData,\n  FormValues,\n  UserInfo,\n  PermissionItem,\n} from "@sinoform/types";\n\nexport default function getCustomPermission(\n  formData: FormData | undefined,\n  formValues: FormValues,\n  currentUser: UserInfo\n): PermissionItem[] {\n  const permissionItems: PermissionItem[] = [];\n  const { passNodes = [], flowNode } = formData ?? {};\n\n  if (\n    formValus?.workflowStatus === "已办结" &&\n    currentUser.userName === "张三"\n  ) {\n    permissionItems.push({\n      name: "yonghufankui", // 用户反馈字段标识\n      hidden: false,\n      readOnly: false,\n    });\n  }\n\n  return permissionItems;\n}\n')))}d.isMDXComponent=!0}}]);