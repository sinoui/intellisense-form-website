"use strict";(self.webpackChunkintellisense_form_docs=self.webpackChunkintellisense_form_docs||[]).push([[5786],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return c}});var a=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=s(t),c=l,g=m["".concat(p,".").concat(c)]||m[c]||d[c]||i;return t?a.createElement(g,r(r({ref:n},u),{},{components:t})):a.createElement(g,r({ref:n},u))}));function c(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,r=new Array(i);r[0]=m;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var s=2;s<i;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},31890:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return m}});var a=t(87462),l=t(63366),i=(t(67294),t(3905)),r=["components"],o={id:"guide-watch-form-values",title:"监听表单值变化"},p=void 0,s={unversionedId:"guide-watch-form-values",id:"guide-watch-form-values",title:"监听表单值变化",description:"本章节的示例代码可以在 sinoform-plugins-web-component-examples/src/plugins/detail-page-extends 中找到。",source:"@site/docs/guide-watch-form-values.mdx",sourceDirName:".",slug:"/guide-watch-form-values",permalink:"/intellisense-form-website/docs/guide-watch-form-values",tags:[],version:"current",frontMatter:{id:"guide-watch-form-values",title:"监听表单值变化"},sidebar:"someSidebar",previous:{title:"表单默认值",permalink:"/intellisense-form-website/docs/guide-default-form-values"},next:{title:"自定义表单校验规则",permalink:"/intellisense-form-website/docs/guide-validate"}},u=[{value:"钩子机制",id:"钩子机制",children:[],level:2},{value:"创建扩展方法",id:"创建扩展方法",children:[],level:2},{value:"注册扩展方法",id:"注册扩展方法",children:[],level:2},{value:"表单设计 id 的获取方式",id:"表单设计-id-的获取方式",children:[],level:2},{value:"示例 1：值关联",id:"示例-1值关联",children:[],level:2},{value:"示例 2：异步值关联",id:"示例-2异步值关联",children:[],level:2},{value:"监听弹窗子表单值变化",id:"监听弹窗子表单值变化",children:[{value:"示例 1：值关联",id:"示例-1值关联-1",children:[],level:3},{value:"示例 2：异步值关联",id:"示例-2异步值关联-1",children:[],level:3}],level:2},{value:"在智能表单产品中调试插件",id:"在智能表单产品中调试插件",children:[],level:2}],d={toc:u};function m(e){var n=e.components,o=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},d,o,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"示例源码")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"本章节的示例代码可以在 ",(0,i.kt)("a",{parentName:"p",href:"https://gitee.com/sinoui/sinoform-plugins-web-component-examples/tree/master/src/plugins/detail-page-extends"},"sinoform-plugins-web-component-examples/src/plugins/detail-page-extends")," 中找到。"))),(0,i.kt)("h2",{id:"钩子机制"},"钩子机制"),(0,i.kt)("p",null,"智能表单通过钩子机制，对外提供内部业务逻辑的扩展定制能力。本小节会先带大家入门钩子机制，学会使用钩子来扩展智能表单的业务逻辑。"),(0,i.kt)("p",null,"对于智能表单应用，大部分逻辑体现在详情页上。所以智能表单当前版本（v1.12.0）暴露的钩子与详情页相关。"),(0,i.kt)("p",null,"当用户打开详情页时，会触发详情页钩子（",(0,i.kt)("inlineCode",{parentName:"p"},"detailPage")," hook）。如果您需要知道用户何时打开详情页的，可以监听详情页钩子，如下所示："),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import AppSetting from "@sinoform/app-setting";\n\n// 扩展名称，即钩子监听者名称\nconst EXTEND_NAME = "firstExtendDemo";\n\n// 监听详情页钩子，即打开详情页时，会调用此监听函数\nAppSetting.hooks.detailPage.tap(EXTEND_NAME, (detailPageContext) => {\n  const id = detailPageContext.formData?.id;\n  if (id) {\n    console.log(`打开了表单${id}详情页`);\n  }\n});\n')),(0,i.kt)("p",null,"在详情页钩子中，可以查看详情页数据，甚至可以变更详情页数据。在钩子监听函数中拿到详情页上下文（",(0,i.kt)("inlineCode",{parentName:"p"},"detailPageContext"),"）后，我们可以监听详情页上下文中的钩子，扩展详情页内部的逻辑。例如我们通过详情页上的表单值变更钩子（",(0,i.kt)("inlineCode",{parentName:"p"},"valueChange")," hook）监听表单变化，示例代码如下："),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"{13-19}","{13-19}":!0},'import AppSetting from "@sinoform/app-setting";\n\n// 扩展名称，即钩子监听者名称\nconst EXTEND_NAME = "firstExtendDemo";\n\n// 监听详情页钩子。即打开详情页时，会调用此监听函数\nAppSetting.hooks.detailPage.tap(EXTEND_NAME, (detailPageContext) => {\n  const id = detailPageContext.formData?.id;\n  if (id) {\n    console.log(`打开了表单${id}详情页`);\n  }\n\n  // 监听值变更钩子。用户在表单中输入值，就会触发值变更钩子，执行此监听函数。\n  detailPageContext.hooks.valueChange.tap(\n    EXTEND_NAME,\n    (prevValue, newValue) => {\n      console.log("新的表单值", newValue);\n    }\n  );\n});\n')),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"钩子机制")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"智能表单的钩子机制是通过 ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/webpack/tapable"},"tapable")," 库实现的。想了解原理的同学，可以学习一下 ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/webpack/tapable"},"tapable"),"。"))),(0,i.kt)("p",null,"说了很多理论部分，接下来我们进入实战吧。"),(0,i.kt)("p",null,"在智能表单中，实现一个扩展需要两个步骤，即："),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#%E5%88%9B%E5%BB%BA%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95"},"创建扩展方法")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#%E6%B3%A8%E5%86%8C%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95"},"注册扩展方法"))),(0,i.kt)("p",null,"我们先实现一个简单的表单值变化监听功能——将变化的表单值输出到控制台，来掌握这两个步骤。"),(0,i.kt)("h2",{id:"创建扩展方法"},"创建扩展方法"),(0,i.kt)("p",null,"下面的示例中，我们在",(0,i.kt)("inlineCode",{parentName:"p"},"src/plugins/detail-page-extends"),"文件夹下创建一个",(0,i.kt)("inlineCode",{parentName:"p"},"helloExtends"),"文件，通过",(0,i.kt)("inlineCode",{parentName:"p"},"valueChange"),"钩子监听表单值变化，然后控制台输出变化前后的值。"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/plugins/detail-page-extends/helloExtends.ts" {12,13,14}',title:'"src/plugins/detail-page-extends/helloExtends.ts"',"{12,13,14}":!0},'import AppSetting from "@sinoform/app-setting";\n// 监听详情页创建\nAppSetting.hooks.detailPage.tap(\n  "helloExtends", // 详情页拓展逻辑钩子的名称\n  (detailPageContext) => {\n    const { hooks, formData, formState } = detailPageContext;\n    const { formDesign: { id } = {} } = formData;\n\n    // 根据表单设计id，判断拓展逻辑是否对该表单生效，如果不加这层判断，则默认拓展逻辑对所有表单都适用\n    if (id === "612df55ac9327f1383eb4bbb") {\n      // 监听表单值变化\n      hooks.valueChange.tap(\n        "helloExtends", // 拓展逻辑的事件名称，原则上与钩子的名称保持一致\n        (prevValue, nextValue) => {\n          // 控制台输出变化前后的值\n          console.log(\n            `表单值发生变化：${JSON.stringify(\n              prevValue\n            )}=======>${JSON.stringify(nextValue)}`\n          );\n        }\n      );\n    }\n  }\n);\n')),(0,i.kt)("h2",{id:"注册扩展方法"},"注册扩展方法"),(0,i.kt)("p",null,"拓展方法开发完成之后只需要在",(0,i.kt)("inlineCode",{parentName:"p"},"src/index.ts"),"中引入该文件，即可完成该拓展方法的注册。"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/index.ts"',title:'"src/index.ts"'},'import "./plugins/detail-page-extends/helloExtends";\n')),(0,i.kt)("h2",{id:"表单设计-id-的获取方式"},"表单设计 id 的获取方式"),(0,i.kt)("p",null,"对于表单设计 id 的获取方式，我们可以从智能表单管理端打开需要绑定的表单，然后在 url 上截取，url 一般为",(0,i.kt)("inlineCode",{parentName:"p"},"http://<网关ip:port>/intellisense-form-manager/:formDesignId?xxx=xxx"),"。如图："),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"获取formDesignId",src:t(75198).Z})),(0,i.kt)("h2",{id:"示例-1值关联"},"示例 1：值关联"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"支持版本：v1.13.0")),(0,i.kt)("p",null,"以一个产品采购表单为例，我们监听产品的",(0,i.kt)("inlineCode",{parentName:"p"},"单价"),"和",(0,i.kt)("inlineCode",{parentName:"p"},"数量"),"，自动计算出产品总价。具体代码如下："),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/plugins/detail-page-extends/watchFormValuesExtends.ts"',title:'"src/plugins/detail-page-extends/watchFormValuesExtends.ts"'},'import AppSetting from "@sinoform/app-setting";\n\nAppSetting.hooks.detailPage.tap("计算产品总价", (detailPageContext) => {\n  const { hooks, formData, formState } = detailPageContext;\n  const { formDesign: { id } = {} } = formData;\n\n  if (id === "612df55ac9327f1383eb4bbb") {\n    // 监听表单值变化\n    hooks.valueChange.tap("计算产品总价", (prevValue, nextValue) => {\n      // 如果产品单价或者数量值发生变化，则重新计算\n      if (\n        nextValue.price !== prevValue.price ||\n        nextValue.count !== prevValue.count\n      ) {\n        nextValue.total = nextValue.price * nextValue.count;\n      }\n    });\n  }\n});\n')),(0,i.kt)("p",null,"从 v1.13.0 版本开始，提供了更简约的表单值关联计算的方式："),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import AppSetting from "@sinoform/app-setting";\n\nAppSetting.listenFormChange(\n  "612df55ac9327f1383eb4bbb",\n  (prevValue, nextValue) => {\n    // 如果产品单价或者数量值发生变化，则重新计算\n    if (\n      nextValue.price !== prevValue.price ||\n      nextValue.count !== prevValue.count\n    ) {\n      nextValue.total = nextValue.price * nextValue.count;\n    }\n  }\n);\n')),(0,i.kt)("h2",{id:"示例-2异步值关联"},"示例 2：异步值关联"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"支持版本：v1.13.0")),(0,i.kt)("p",null,"我们在实际应用中，有些值的计算需要从后端获取。 比如一个绩效考核表单，我们需要监听",(0,i.kt)("inlineCode",{parentName:"p"},"人员姓名(userName)"),"的变化，然后从后端读取",(0,i.kt)("inlineCode",{parentName:"p"},"员工编号(workerId)"),"的值， 此时我们可以使用",(0,i.kt)("inlineCode",{parentName:"p"},"valueChangeAsync"),"钩子来监并处理异步值关联。具体代码如下："),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/plugins/detail-page-extends/watchFormValuesExtends.ts"',title:'"src/plugins/detail-page-extends/watchFormValuesExtends.ts"'},'import AppSetting from "@sinoform/app-setting";\n\nAppSetting.hooks.detailPage.tap("异步获取员工编号", (detailPageContext) => {\n  const { hooks, formData, formState } = detailPageContext;\n  const { formDesign: { id } = {} } = formData;\n\n  if (id === "612df55ac9327f1383eb4bbb") {\n    // 监听表单值变化\n    hooks.valueChangeAsync.tapPromise(\n      "异步获取员工编号",\n      async (prevValue, nextValue) => {\n        // 如果userName发生变化，则重新获取workerId的值\n        if (nextValue.userName !== prevValue.userName) {\n          nextValue.workerId = await getWorkIdByUserName(nextValue.userName);\n        }\n      }\n    );\n  }\n});\n')),(0,i.kt)("p",null,"从 v1.13.0 版本开始，提供了更简约的表单值关联计算的方式："),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import AppSetting from "@sinoform/app-setting";\n\nAppSetting.listenFormChangeAsync(\n  "612df55ac9327f1383eb4bbb",\n  async (prevValue, nextValue) => {\n    // 如果userName发生变化，则重新获取workerId的值\n    if (nextValue.userName !== prevValue.userName) {\n      nextValue.workerId = await getWorkIdByUserName(nextValue.userName);\n    }\n  }\n);\n')),(0,i.kt)("h2",{id:"监听弹窗子表单值变化"},"监听弹窗子表单值变化"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"支持版本：v1.15.0")),(0,i.kt)("p",null,"智能表单从 v1.15.0 版本开始，提供了监听弹窗子表单值变更的方法，主要处理方式与监听主表单值变更保持一致。"),(0,i.kt)("h3",{id:"示例-1值关联-1"},"示例 1：值关联"),(0,i.kt)("p",null,"如果一个产品采购明细是以弹窗子表单的形式存在，我们在填写数据时，需要监听产品的",(0,i.kt)("inlineCode",{parentName:"p"},"单价"),"和",(0,i.kt)("inlineCode",{parentName:"p"},"数量"),"，自动计算出产品总价。具体代码如下："),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import AppSetting from "@sinoform/app-setting";\n\nAppSetting.listenSubFormChange(\n  "612df55ac9327f1383eb4bbb",\n  "field_1",\n  (prevValue, nextValue, parentValue) => {\n    // 如果产品单价或者数量值发生变化，则重新计算\n    if (\n      nextValue.field_1_price !== prevValue.field_1_price ||\n      nextValue.field_1_count !== prevValue.field_1_count\n    ) {\n      nextValue.field_1_total =\n        nextValue.field_1_price * nextValue.field_1_count;\n    }\n  }\n);\n')),(0,i.kt)("h3",{id:"示例-2异步值关联-1"},"示例 2：异步值关联"),(0,i.kt)("p",null,"如果我们有一个绩效考核明细表，我们在监听到",(0,i.kt)("inlineCode",{parentName:"p"},"人员姓名(userName)"),"变化后，需要从后端获取其绩效考核各项指标及其考核结果，此时我们就能通过",(0,i.kt)("inlineCode",{parentName:"p"},"listenSubFormChangeAsync"),"来处理子表单的异步值关联，具体代码如下："),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import AppSetting from "@sinoform/app-setting";\n\nAppSetting.listenSubFormChangeAsync(\n  "612df55ac9327f1383eb4bbb",\n  "field_1",\n  async (prevValue, nextValue, parentValue) => {\n    // 如果userName发生变化，则重新获取绩效考核结果\n    if (nextValue.userName !== prevValue.userName) {\n      const { yuwen, shuxue, total } = await getjxkhByUserName(\n        nextValue.userName\n      );\n      nextValue.yuwen = yuwen;\n      nextValue.shuxue = shuxue;\n      nextValue.total = total;\n    }\n  }\n);\n')),(0,i.kt)("h2",{id:"在智能表单产品中调试插件"},"在智能表单产品中调试插件"),(0,i.kt)("p",null,"本小节以智能表单外网演示环境来说明如何在智能表单产品中调试插件。"),(0,i.kt)("p",null,"打开",(0,i.kt)("a",{parentName:"p",href:"http://121.30.232.162:18880/sso/"},"登录页"),"，使用账号 ",(0,i.kt)("inlineCode",{parentName:"p"},"智能表单管理员"),"（密码是：",(0,i.kt)("inlineCode",{parentName:"p"},"1qaz2wsx!"),"） 登录系统，然后选择产品示例，进入智能表单管理页面。"),(0,i.kt)("p",null,"打开表单",(0,i.kt)("inlineCode",{parentName:"p"},"演示业务逻辑扩展示例"),"，起草页面，输入",(0,i.kt)("inlineCode",{parentName:"p"},"A产品单价"),"和",(0,i.kt)("inlineCode",{parentName:"p"},"A产品数量"),"，会自动写入",(0,i.kt)("inlineCode",{parentName:"p"},"A产品总价"),"的值。"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"监听表单值变化",src:t(94416).Z})))}m.isMDXComponent=!0},94416:function(e,n,t){n.Z=t.p+"assets/images/guide-watch-form-values-1ba725b55ed18d8e409b8fee39d5fdc5.gif"},75198:function(e,n,t){n.Z=t.p+"assets/images/get_formdesignId-84f980f723e09682602879f83c4c1dc6.png"}}]);