"use strict";(self.webpackChunkintellisense_form_docs=self.webpackChunkintellisense_form_docs||[]).push([[5993],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),k=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=k(e.components);return a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=k(n),d=r,m=u["".concat(o,".").concat(d)]||u[d]||p[d]||l;return n?a.createElement(m,s(s({ref:t},c),{},{components:n})):a.createElement(m,s({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,s=new Array(l);s[0]=u;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var k=2;k<l;k++)s[k]=n[k];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},70064:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return k},toc:function(){return c},default:function(){return u}});var a=n(87462),r=n(63366),l=(n(67294),n(3905)),s=["components"],i={id:"deployment-ksql",title:"部署 ksql"},o=void 0,k={unversionedId:"deployment-ksql",id:"deployment-ksql",title:"部署 ksql",description:"单机部署 ksql （ubuntu）",source:"@site/docs/deployment-ksql.md",sourceDirName:".",slug:"/deployment-ksql",permalink:"/intellisense-form-website/docs/deployment-ksql",tags:[],version:"current",frontMatter:{id:"deployment-ksql",title:"部署 ksql"},sidebar:"someSidebar",previous:{title:"安装 mongodb",permalink:"/intellisense-form-website/docs/deployment-mongodb"},next:{title:"安装 nodejs",permalink:"/intellisense-form-website/docs/deployment-nodejs"}},c=[{value:"单机部署 ksql （ubuntu）",id:"单机部署-ksql-ubuntu",children:[{value:"1. 部署 jdk",id:"1-部署-jdk",children:[],level:3},{value:"2. 部署 kafka",id:"2-部署-kafka",children:[],level:3},{value:"3. 部署 ksql",id:"3-部署-ksql",children:[],level:3}],level:2},{value:"k8s 部署 ksql",id:"k8s-部署-ksql",children:[{value:"1. 准备离线镜像",id:"1-准备离线镜像",children:[],level:3},{value:"2. 准备离线文件",id:"2-准备离线文件",children:[],level:3},{value:"3. 部署 kafka 集群",id:"3-部署-kafka-集群",children:[{value:"3.1 创建 namespace",id:"31-创建-namespace",children:[],level:4},{value:"3.2 解压 strimzi",id:"32-解压-strimzi",children:[],level:4},{value:"3.3 部署 kafka 集群",id:"33-部署-kafka-集群",children:[],level:4}],level:3},{value:"4. 部署 ksql",id:"4-部署-ksql",children:[{value:"4.1 解压 helm 文件包",id:"41-解压-helm-文件包",children:[],level:4},{value:"4.2 部署 ksql",id:"42-部署-ksql",children:[],level:4}],level:3}],level:2}],p={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,s);return(0,l.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"单机部署-ksql-ubuntu"},"单机部署 ksql （ubuntu）"),(0,l.kt)("h3",{id:"1-部署-jdk"},"1. 部署 jdk"),(0,l.kt)("p",null,"若已安装 jdk 则跳过该步骤。"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# 安装 jdk\n$ apt install -y openjdk-8-jdk\n")),(0,l.kt)("h3",{id:"2-部署-kafka"},"2. 部署 kafka"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# 下载 kafka 安装包，若想使用其他版本 kafka 需要从 kafka 官网获取下载链接\n$ wget https://dlcdn.apache.org/kafka/3.3.1/kafka_2.13-3.3.1.tgz\n# 解压\n$ tar zxvf kafka_2.12-3.2.1.tgz\n# 启动 zookeeper\n$ cd kafka_2.12-3.2.1\n$ bin/zookeeper-server-start.sh -daemon config/zookeeper.properties\n# 启动 kafka\n$ bin/kafka-server-start.sh -daemon config/server.properties\n")),(0,l.kt)("h3",{id:"3-部署-ksql"},"3. 部署 ksql"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'# Install basic software\nsudo apt update\nsudo apt install -y software-properties-common curl gnupg\n\n# Import the public key\ncurl -sq http://ksqldb-packages.s3.amazonaws.com/deb/0.28/archive.key | sudo apt-key add -\n\n# Add the ksqlDB apt repository\nsudo add-apt-repository "deb http://ksqldb-packages.s3.amazonaws.com/deb/0.28 stable main"\nsudo apt update\n\n# Install the package\nsudo apt install confluent-ksqldb\n\n# 启动 ksql\n/usr/bin/ksql-server-start -daemon /etc/ksqldb/ksql-server.properties\n')),(0,l.kt)("h2",{id:"k8s-部署-ksql"},"k8s 部署 ksql"),(0,l.kt)("h3",{id:"1-准备离线镜像"},"1. 准备离线镜像"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"quay.io/strimzi/operator:0.31.1"),(0,l.kt)("li",{parentName:"ul"},"quay.io/strimzi/kafka:0.31.1-kafka-3.2.3"),(0,l.kt)("li",{parentName:"ul"},"docker.io/confluentinc/cp-ksqldb-server:6.1.0 "),(0,l.kt)("li",{parentName:"ul"},"docker.io/confluentinc/cp-schema-registry:6.1.0"),(0,l.kt)("li",{parentName:"ul"},"solsson/kafka-prometheus-jmx-exporter@sha256:6f82e2b0464f50da8104acd7363fb9b995001ddff77d248379f8788e78946143")),(0,l.kt)("h3",{id:"2-准备离线文件"},"2. 准备离线文件"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://sino-intellisense-form.oss-cn-beijing.aliyuncs.com/deploy-files/strimzi-0.31.1.tar.gz"},"strimzi-0.31.1.tar.gz")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://sino-intellisense-form.oss-cn-beijing.aliyuncs.com/deploy-files/cp-helm-charts-master.tar.gz"},"cp-helm-charts-master.tar.gz"))),(0,l.kt)("h3",{id:"3-部署-kafka-集群"},"3. 部署 kafka 集群"),(0,l.kt)("h4",{id:"31-创建-namespace"},"3.1 创建 namespace"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl create ns kafka\n")),(0,l.kt)("h4",{id:"32-解压-strimzi"},"3.2 解压 strimzi"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ tar zxvf strimzi-0.31.1.tar.gz\n$ cd strimzi-0.31.1\n")),(0,l.kt)("h4",{id:"33-部署-kafka-集群"},"3.3 部署 kafka 集群"),(0,l.kt)("p",null,"创建 kafka.yaml："),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: kafka.strimzi.io/v1beta2\nkind: Kafka\nmetadata:\n  name: my-cluster\n  namespace: kafka\nspec:\n  kafka:\n    version: 3.2.3\n    replicas: 3\n    listeners:\n      - name: plain\n        port: 9092\n        type: internal\n        tls: false\n      - name: tls\n        port: 9093\n        type: internal\n        tls: true\n    config:\n      offsets.topic.replication.factor: 1\n      transaction.state.log.replication.factor: 1\n      transaction.state.log.min.isr: 1\n      default.replication.factor: 1\n      min.insync.replicas: 1\n    storage:\n      type: jbod\n      volumes:\n      - id: 0\n        type: persistent-claim\n        class: nfs-retain-storage\n        size: 10Gi\n        deleteClaim: false\n  zookeeper:\n    replicas: 3\n    storage:\n      type: persistent-claim\n      class: nfs-retain-storage\n      size: 10Gi\n      deleteClaim: false\n  entityOperator:\n    topicOperator: {}\n    userOperator: {}\n")),(0,l.kt)("p",null,"创建 kafka 集群："),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl create -f install/cluster-operator/ -n kafka\n$ kubectl apply -f kafka.yaml\n")),(0,l.kt)("h3",{id:"4-部署-ksql"},"4. 部署 ksql"),(0,l.kt)("h4",{id:"41-解压-helm-文件包"},"4.1 解压 helm 文件包"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ tar zxvf cp-helm-charts-master.tar.gz\n$ cd cp-helm-charts-master\n")),(0,l.kt)("h4",{id:"42-部署-ksql"},"4.2 部署 ksql"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'$ helm install kafka-schema-registry --set kafka.bootstrapServers="PLAINTEXT://my-cluster-kafka-bootstrap:9092" . -n kafka\n$ helm install ksql-server --set cp-schema-registry.url="http://kafka-schema-registry-cp-schema-registry:8081",kafka.bootstrapServers="PLAINTEXT://my-cluster-kafka-bootstrap:9092",ksql.headless=false . -n kafka\n')))}u.isMDXComponent=!0}}]);