"use strict";(self.webpackChunkintellisense_form_docs=self.webpackChunkintellisense_form_docs||[]).push([[6472],{3905:function(e,n,r){r.d(n,{Zo:function(){return c},kt:function(){return p}});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),u=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},c=function(e){var n=u(e.components);return t.createElement(s.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(r),p=a,m=d["".concat(s,".").concat(p)]||d[p]||f[p]||i;return r?t.createElement(m,o(o({ref:n},c),{},{components:r})):t.createElement(m,o({ref:n},c))}));function p(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=r[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6664:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var t=r(87462),a=r(63366),i=(r(67294),r(3905)),o=["components"],l={id:"integrate",title:"业务系统集成"},s=void 0,u={unversionedId:"integrate",id:"integrate",title:"业务系统集成",description:"在业务系统各种使用 jquery.load 集成智能表单应用",source:"@site/docs/integrate.md",sourceDirName:".",slug:"/integrate",permalink:"/intellisense-form-website/docs/integrate",tags:[],version:"current",frontMatter:{id:"integrate",title:"业务系统集成"}},c=[{value:"在业务系统各种使用 jquery.load 集成智能表单应用",id:"在业务系统各种使用-jqueryload-集成智能表单应用",children:[],level:2},{value:"在业务系统中的统一待办模块打开待办详情",id:"在业务系统中的统一待办模块打开待办详情",children:[],level:2},{value:"在业务系统中集成智能表单管理",id:"在业务系统中集成智能表单管理",children:[],level:2}],f={toc:c};function d(e){var n=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,t.Z)({},f,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"在业务系统各种使用-jqueryload-集成智能表单应用"},"在业务系统各种使用 jquery.load 集成智能表单应用"),(0,i.kt)("p",null,"在使用 jquery 开发的业务系统中，点击资源菜单， 仍然使用\\$('#contaienrId').load()加载智能表单应用资源。只是在集成的业务系统中，我们需要将原有 load 方法做完善，支持通过匹配路由来加载对应的 React 组件。具体操作如下："),(0,i.kt)("p",null,"如果检测到加载的资源 url 是有 react 项目中的固定路由开头，则表示加载 react 项目资源，按如下代码特殊处理："),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// ....\n// 需要采用兼容ie浏览器的写法\nif (urlstr.indexOf('/intellisense-form/') === 0) {\n  var searchObj = qs.formatSearch(window.location.search);\n  searchObj.url = urlstr;\n  var originUrl =\n    window.location.protocol +\n    '//' +\n    window.location.host +\n    window.location.pathname +\n    qs.queryParams(searchObj, true);\n  history.pushState(\n    history.state,\n    urlTitle, // 路由名称\n    originUrl,\n  );\n  $('#contaienrId').load(urlstr); // contaienrId为dom元素的id属性值\n}\n//....\n")),(0,i.kt)("p",null,'这样处理后，点击菜单，如果检测路由 path 以"/intellisense-form/"开头，浏览器地址栏 url 会在原来的 基础上拼上&url=/intellisense-form/draftList/',(0,i.kt)("inlineCode",{parentName:"p"},"${formId}"),"这样的字符串。同时 react 项目使用 MemoryRouter 做路由管理，通过使用 qs 对",(0,i.kt)("inlineCode",{parentName:"p"},"window.location.search"),"做解析来确定加载哪一个路由。"),(0,i.kt)("p",null,"如果希望刷新后还是进入原来的页面，需要在业务系统页面加载完成时做如下操作："),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"$(function() {\n  const params = qs.formatSearch(window.location.search);\n  const initUrl = params.url;\n  if (initUrl) {\n    $('#contaienrId').load(initUrl);\n  }\n});\n")),(0,i.kt)("p",null,"业务系统处理时，需要自定义 qs.js 来解析 url。qs.js 需要在项目入口 html 页面引入。具体代码如下："),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"var qs = {\n  formatSearch: function(se) {\n    // 将search字符串格式化为json对象\n    if (typeof se !== 'undefined' && typeof se !== 'object' && se !== '') {\n      se = se.substr(1);\n      var arr = se.split('&'),\n        obj = {},\n        newarr = [];\n      $.each(arr, function(i, v) {\n        newarr = v.split('=');\n        if (typeof obj[newarr[0]] === 'undefined') {\n          obj[newarr[0]] = newarr[1];\n        }\n      });\n      return obj;\n    }\n\n    return {};\n  },\n  queryParams: function(data, isPrefix) {\n    // 将json对象序列化为search字符串 isPrefix表示在开始位置是否增加？\n    isPrefix = isPrefix ? isPrefix : false;\n    var prefix = isPrefix ? '?' : '';\n    var _result = [];\n    for (var key in data) {\n      var value = data[key];\n      // 去掉为空的参数\n      if (['', undefined, null].indexOf(value) !== -1) {\n        continue;\n      }\n      if (value.constructor === Array) {\n        for (var i = 0; i < value.length; i++) {\n          _result.push(key + '[]=' + value[i]);\n        }\n      } else {\n        _result.push(key + '=' + value);\n      }\n    }\n\n    return _result.length ? prefix + _result.join('&') : '';\n  },\n};\n")),(0,i.kt)("h2",{id:"在业务系统中的统一待办模块打开待办详情"},"在业务系统中的统一待办模块打开待办详情"),(0,i.kt)("p",null,'点击统一待办数据时,需要先判断数据中的待办 url 是否以"/intellisense-form/"开始,若是,则再该 url 之后拼接 id 和 workItemId 参数。具体代码如下：'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"if (data[i].url.indexOf('/intellisense-form/') === 0) {\n  data[i].url =\n    data[i].url + '?id=' + data[i].id + '&workItemId=' + data[i].workItemId;\n}\n...\n")),(0,i.kt)("p",null,"如果详情页面是有 iframe 窗口形式打开，则流程发送成功之后，需要自定关闭 iframe 窗口。我们是以 window.postMessage()方法向业务系统发送消息,业务系统监听到该消息后认为流程发送成功,\n继而调用关闭窗口的方法关闭详情弹窗。具体代码如下："),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"window.addEventListener(\n  'message',\n  function(event) {\n    var data = event.data;\n    if (data && JSON.parse(data).type === 'sendSuccess') {\n      // 根据各业务系统使用弹窗方式 关闭弹窗\n    }\n  },\n  false,\n);\n")),(0,i.kt)("h2",{id:"在业务系统中集成智能表单管理"},"在业务系统中集成智能表单管理"),(0,i.kt)("p",null,'第一步：在统一授权管理系统的统一资源管理中新增资源内容为"/intellisense-form-manager/",资源名称为"智能表单管理"的资源。\n第二步：在业务系统中点击菜单，加载对应菜单资源的代码中。需要判断该菜单资源内容是否为"/intellisense-form-manager/"。若是,则以浏览器新页签的形式打开智能表单管理应用。具体代码如下：'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"if (data[i].url.indexOf('/intellisense-form-manager/') === 0) {\n  var menuHref =\n    window.location.protocol + '//' + window.location.host + data[i].url;\n  var menuHtml =\n    '<a href=\"' + menuHref + '\" target=\"_blank\">' + data[i].name + '</a>';\n}\n")))}d.isMDXComponent=!0}}]);